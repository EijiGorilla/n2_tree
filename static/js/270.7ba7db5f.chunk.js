"use strict";(self.webpackChunkn2_tree=self.webpackChunkn2_tree||[]).push([[270],{270:(e,n,r)=>{r.r(n),r.d(n,{getLabelSchemes:()=>d});r(11265);var a=r(50076),t=r(37119),i=r(90494),s=r(63860);async function o(e){const{layer:n,renderer:r}=e;if(await n.load(),"binning"!==n.featureReduction?.type)throw new a.default("bins-label-schemes:invalid-parameters","featureReduction type of the layer is not valid");const t=r||n.featureReduction.renderer;if(!t)throw new a.default("bins-label-schemes:invalid-parameters","'renderer' is not valid");return{layer:n,renderer:t}}async function l(e,n,r,a){const i=(0,t.yb)(e,n);if(!i)return null;const s=(0,t.Hg)(n,r,i,a);return{name:`binning-${e}`,labelingInfo:[(0,t.Rl)(s,!0)],fieldName:e}}async function d(e){const[{renderer:n,layer:r},t]=await Promise.all([o(e),(0,s.ud)("esri/smartMapping/t9n/smartMapping")]),d=t.clusters.predominantNoneValue;if(e.field){const t=await l(e.field,r,n,d);if(!t)throw new a.default("bins-label-schemes:invalid-parameters","'field' is not a valid aggregate field");return{primaryScheme:t,secondarySchemes:[]}}const f=await l(i.z,r),u=[],c=function(e){let n=[];const r=e.featureReduction;return"fields"in r&&(n=r.fields.map((e=>e.name))),n}(r).filter((e=>e.toLowerCase()!==i.z.toLowerCase()));for(const a of c){const e=await l(a,r,n,d);e&&u.push(e)}return{primaryScheme:f,secondarySchemes:u}}},90494:(e,n,r)=>{r.d(n,{p:()=>i,z:()=>t});var a=r(50076);const t="aggregateCount";function i(e,n){if(!e.view)throw new a.default(`${n}:missing-parameters`,"'view' parameter is required for binning");if(e.sqlExpression)throw new a.default(`${n}:invalid-parameters`,"'sqlExpression' parameter is not supported for binning");if("3d"===e.view.type)throw new a.default(`${n}:invalid-parameters`,"3d view is not supported for binning")}}}]);
//# sourceMappingURL=270.7ba7db5f.chunk.js.map