"use strict";(self.webpackChunkn2_tree=self.webpackChunkn2_tree||[]).push([[76068],{76068:(e,t,a)=>{a.r(t),a.d(t,{default:()=>p});var r,s=a(35143),i=a(3825),n=a(50076),o=a(46053),l=(a(81806),a(76460),a(47249),a(85842)),d=a(25515),m=a(65624),c=a(21617),g=a(5682);let h=r=class extends((0,m.dM)((0,g.j)((0,c.J)(d.default)))){constructor(){super(...arguments),this.type="base-dynamic"}getImageUrl(){throw new n.default("basedynamiclayer:getImageUrl-not-implemented","getImageUrl() is not implemented")}addResolvingPromise(e){super.addResolvingPromise(e)}async fetchImage(e,t,a,r){const s=this.getImageUrl(e,t,a),n={responseType:"image",signal:r?.signal,query:{...this.refreshParameters}};if("string"==typeof s){const{data:e}=await(0,i.default)(s,n);return e}const o=await s,{data:l}=await(0,i.default)(o,n);return l}async fetchImageBitmap(e,t,a){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(this.fetchImage!==r.prototype.fetchImage){const r=await this.fetchImage(e,t,a,s);try{return await createImageBitmap(r)}catch(p){throw new n.default("request:server","Unable to load image",{error:p,extent:e,width:t,height:a})}}const o=this.getImageUrl(e,t,a),l={responseType:"blob",signal:s?.signal,query:{...this.refreshParameters}};if("string"==typeof o){const{data:e}=await(0,i.default)(o,l);return createImageBitmap(e)}const d=await o,{data:m}=await(0,i.default)(d,l);return createImageBitmap(m)}};(0,s._)([(0,o.MZ)({readOnly:!0,value:"base-dynamic"})],h.prototype,"type",void 0),(0,s._)([(0,o.MZ)({type:["show","hide"]})],h.prototype,"listMode",void 0),h=r=(0,s._)([(0,l.$)("esri.layers.BaseDynamicLayer")],h);const p=h}}]);
//# sourceMappingURL=76068.d0d69727.chunk.js.map