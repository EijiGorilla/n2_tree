{"version":3,"file":"static/js/58582.0fe75393.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/views/2d/engine/webgl/PooledUint32Array.js","../node_modules/@arcgis/core/views/webgl/ProgramTemplate.js","../node_modules/@arcgis/core/core/libs/gl-matrix-2/factories/vec4f32.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js","../node_modules/@arcgis/core/views/2d/engine/webgl/Mesh2D.js","../node_modules/@arcgis/core/views/2d/engine/webgl/ClippingInfo.js","../node_modules/@arcgis/core/views/2d/engine/webgl/WGLContainer.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushTileDebugInfo.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/FreeList.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js","../node_modules/@arcgis/core/views/2d/engine/webgl/TiledDisplayObject.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js","../node_modules/@arcgis/core/core/libs/gl-matrix-2/factories/vec3f32.js","../node_modules/@arcgis/core/views/2d/engine/webgl/AFeatureTile.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js","../node_modules/@arcgis/core/views/2d/engine/brushes.js","../node_modules/@arcgis/core/views/2d/engine/webgl/DefaultVertexAttributeLayouts.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js","../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureDisplayList.js","../node_modules/@arcgis/core/views/2d/engine/webgl/ReshufflePlan.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/Buffer.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/MappedMesh.js","../node_modules/@arcgis/core/views/2d/engine/webgl/util/Reader.js","../node_modules/@arcgis/core/views/2d/engine/webgl/mesh/meshDebugUtils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureTile.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import{assertIsSome as t}from\"../../../../core/maybe.js\";import{FreeList as e}from\"./cpuMapped/FreeList.js\";const r=has(\"esri-2d-log-allocations\");class s{static create(t,e){const r=e.acquireUint32Array(t);return new s(r,e)}constructor(t,e){this._array=t,this._pool=e}get array(){return this._array}get length(){return this._array.length}getUint32View(t,e){return new Uint32Array(this._array.buffer,t+this._array.byteOffset,e)}expand(t){if(t<=this._array.byteLength)return;const e=this._pool.acquireUint32Array(t);e.set(this._array),this._pool.releaseUint32Array(this._array),this._array=e}destroy(){this._pool.releaseUint32Array(this._array)}}class a{constructor(){this._data=new ArrayBuffer(a.BYTE_LENGTH),this._freeList=new e({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(t){const e=this._freeList.firstFit(t);return null==e?null:new Uint32Array(this._data,e,t/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(t){this._freeList.free(t.byteOffset,t.byteLength)}}class i{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*a.BYTE_LENGTH}acquireUint32Array(e){if(this._bytesAllocated+=e,r&&console.log(`Allocating ${e}, (${this._bytesAllocated} / ${this._bytesTotal})`),e>=a.BYTE_LENGTH)return new Uint32Array(e/Uint32Array.BYTES_PER_ELEMENT);for(const t of this._pages){const r=t.acquireUint32Array(e);if(null!=r)return r}const s=this._addPage().acquireUint32Array(e);return t(s,\"Expected to allocate page\"),s}releaseUint32Array(t){this._bytesAllocated-=t.byteLength,r&&console.log(`Freeing ${t.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const e=this._pagesByBuffer.get(t.buffer);e&&e.releaseUint32Array(t)}_addPage(){const t=new a;return this._pages.push(t),this._pagesByBuffer.set(t.buffer,t),t}}export{i as ArrayBufferPool,s as PooledUint32Array};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{Program as r}from\"./Program.js\";function e(e,t,a=\"\"){return new r(e,a+t.shaders.vertexShader,a+t.shaders.fragmentShader,t.attributes)}export{e as createProgram};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nfunction n(){return new Float32Array(4)}function t(n){const t=new Float32Array(4);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function r(n,t,r,e){const o=new Float32Array(4);return o[0]=n,o[1]=t,o[2]=r,o[3]=e,o}function e(n,t){return new Float32Array(n,t,4)}function o(){return n()}function u(){return r(1,1,1,1)}function c(){return r(1,0,0,0)}function i(){return r(0,1,0,0)}function a(){return r(0,0,1,0)}function f(){return r(0,0,0,1)}const l=o(),_=u(),s=c(),y=i(),w=a(),N=f(),T=Object.freeze(Object.defineProperty({__proto__:null,ONES:_,UNIT_W:N,UNIT_X:s,UNIT_Y:y,UNIT_Z:w,ZEROS:l,clone:t,create:n,createView:e,fromValues:r,ones:u,unitW:f,unitX:c,unitY:i,unitZ:a,zeros:o},Symbol.toStringTag,{value:\"Module\"}));export{_ as ONES,N as UNIT_W,s as UNIT_X,y as UNIT_Y,w as UNIT_Z,l as ZEROS,t as clone,n as create,e as createView,r as fromValues,u as ones,f as unitW,c as unitX,i as unitY,a as unitZ,T as v,o as zeros};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport r from\"./shaderRepository.js\";import{ShaderCompiler as e}from\"../../../../../webgl/ShaderCompiler.js\";function o(r){return function(e){let o=r;return e.split(\"/\").forEach((r=>{o&&(o=o[r])})),o}}const t=new e(o(r));function n(r){return t.resolveIncludes(r)}export{n as resolveIncludes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nconst e={background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\ngl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nlowp vec4 color = texture2D(u_tex, v_uv);\\ngl_FragColor = color * u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_pos , 0.0, 1.0);\\nv_uv = a_tex;\\n}\"},debug:{overlay:{\"overlay.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvoid main(void) {\\ngl_FragColor = v_color;\\n}\",\"overlay.vert\":\"attribute vec3 a_PositionAndFlags;\\nuniform mat3 u_dvsMat3;\\nuniform vec4 u_colors[4];\\nuniform float u_opacities[4];\\nvarying vec4 v_color;\\nvoid main(void) {\\nvec2 position = a_PositionAndFlags.xy;\\nfloat flags = a_PositionAndFlags.z;\\nint colorIndex = int(mod(flags, 4.0));\\nvec4 color;\\nfor (int i = 0; i < 4; i++) {\\ncolor = u_colors[i];\\nif (i == colorIndex) {\\nbreak;\\n}\\n}\\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\\nfloat opacity;\\nfor (int i = 0; i < 4; i++) {\\nopacity = u_opacities[i];\\nif (i == opacityIndex) {\\nbreak;\\n}\\n}\\nv_color = color * opacity;\\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\"}},dot:{dot:{\"dot.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nuniform highp float u_tileZoomFactor;\\nvoid main()\\n{\\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\\ngl_FragColor = v_color * alpha;\\n}\",\"dot.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nuniform sampler2D u_texture;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp float u_tileZoomFactor;\\nuniform highp float u_dotSize;\\nuniform highp float u_pixelRatio;\\nvarying vec2 v_pos;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nconst float EPSILON = 0.000001;\\nvoid main()\\n{\\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\\n0., -1., 0.,\\n0., 1., 1.  );\\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\\nv_color = texture2D(u_texture, texCoords.xy);\\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\\nfloat z = 0.;\\nz += 2.0 * step(v_color.a, EPSILON);\\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\\nv_dotRatio = u_dotSize / gl_PointSize;\\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\\n}\"}},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\nfloat b = 1.0 / 6.0;\\nfloat v2 = v * v;\\nfloat v3 = v2 * v;\\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\nfloat w3 = b * v3;\\nreturn vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\nvec4 w = computeWeights(v);\\nfloat g0 = w.x + w.y;\\nfloat g1 = w.z + w.w;\\nfloat h0 = 1.0 - (w.y / g0) + v;\\nfloat h1 = 1.0 + (w.w / g1) - v;\\nreturn vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\\nvec2 texel = coords * texSize - 0.5;\\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\nvec2 coords10 = coords + hgX.x * eX;\\nvec2 coords00 = coords - hgX.y * eX;\\nvec2 coords11 = coords10 + hgY.x * eY;\\nvec2 coords01 = coords00 + hgY.x * eY;\\ncoords10 = coords10 - hgY.y * eY;\\ncoords00 = coords00 - hgY.y * eY;\\nvec4 color00 = texture2D(sampler, coords00);\\nvec4 color10 = texture2D(sampler, coords10);\\nvec4 color01 = texture2D(sampler, coords01);\\nvec4 color11 = texture2D(sampler, coords11);\\ncolor00 = mix(color00, color01, hgY.z);\\ncolor10 = mix(color10, color11, hgY.z);\\ncolor00 = mix(color00, color10, hgX.z);\\nreturn color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 texelStart = floor(coords * texSize);\\nvec2 coord0 = texelStart / texSize;\\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\nvec4 color0 = texture2D(sampler, coord0);\\nvec4 color1 = texture2D(sampler, coord1);\\nvec4 color2 = texture2D(sampler, coord2);\\nvec4 color3 = texture2D(sampler, coord3);\\nvec2 blend = fract(coords * texSize);\\nvec4 color01 = mix(color0, color1, blend.x);\\nvec4 color23 = mix(color2, color3, blend.x);\\nvec4 color = mix(color01, color23, blend.y);\\n#ifdef NNEDGE\\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\\n#endif\\nreturn color;\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\nvec2 invSize = 1.0 / texSize;\\nvec2 texel = coords * texSize;\\nvec2 texel_i = floor(texel);\\nvec2 texel_frac = fract(texel);\\nvec4 colorP = texture2D(sampler, texel_i * invSize);\\nvec4 colorP1 = vec4(colorP);\\nvec4 colorP2 = vec4(colorP);\\nvec4 colorP3 = vec4(colorP);\\nvec4 colorP4 = vec4(colorP);\\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\\ncolorP1 = colorA;\\n}\\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\\ncolorP2 = colorB;\\n}\\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\\ncolorP3 = colorC;\\n}\\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\\ncolorP4 = colorD;\\n}\\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\nreturn mix(colorP12, colorP34, texel_frac.y);\\n}\"},heatmap:{heatmapResolve:{\"heatmapResolve.frag\":\"precision highp float;\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 4.0\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform sampler2D u_texture;\\nuniform sampler2D u_gradient;\\nuniform vec2 u_densityMinAndInvRange;\\nuniform float u_densityNormalization;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 data = texture2D(u_texture, v_uv);\\nfloat density = data.r * COMPRESSION_FACTOR;\\ndensity *= u_densityNormalization;\\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\\ngl_FragColor = vec4(color.rgb * color.a, color.a);\\n}\",\"heatmapResolve.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nvarying vec2 v_uv;\\nvoid main() {\\nv_uv = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_texture;\\nmediump float gauss1(mediump vec2 dir) {\\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\nreturn u_channelSelector * sample;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\nmediump float w = gauss1(i * u_direction.xy);\\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\nweight += w;\\n}\\nvoid main(void) {\\nmediump float tot = 0.0;\\nmediump float weight = 0.0;\\naccumGauss1(-5.0, tot, weight);\\naccumGauss1(-4.0, tot, weight);\\naccumGauss1(-3.0, tot, weight);\\naccumGauss1(-2.0, tot, weight);\\naccumGauss1(-1.0, tot, weight);\\naccumGauss1(0.0, tot, weight);\\naccumGauss1(1.0, tot, weight);\\naccumGauss1(2.0, tot, weight);\\naccumGauss1(3.0, tot, weight);\\naccumGauss1(4.0, tot, weight);\\naccumGauss1(5.0, tot, weight);\\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\nmediump float y = texture2D(u_texture, v_texcoord)[3];\\nconst mediump float y0 = 0.5;\\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\\nmediump float d = (y - y0) / m0;\\nreturn d;\\n}\\nmediump vec4 shade(mediump float d) {\\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\nmediump float d = estimateDistance();\\ngl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D filterFlags;\\nuniform highp sampler2D animation;\\nuniform highp sampler2D gpgpu;\\nuniform highp sampler2D visualVariableData;\\nuniform highp sampler2D dataDriven0;\\nuniform highp sampler2D dataDriven1;\\nuniform highp sampler2D dataDriven2;\\nuniform float size;\\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\\nhighp vec3  texel = unpackDisplayIdTexel(id);\\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\\nhighp float col = mod(u32, size);\\nhighp float row = (u32 - col) / size;\\nhighp float u = col / size;\\nhighp float v = row / size;\\nreturn vec2(u, v);\\n}\\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\\n}\\nhighp vec4 getFilterData(in highp vec3 id) {\\nvec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(filterFlags, coords);\\n}\\nhighp vec4 getAnimation(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(animation, coords);\\n}\\nhighp vec4 getVisualVariableData(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(visualVariableData, coords);\\n}\\nhighp vec4 getDataDriven0(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven0, coords);\\n}\\nhighp vec4 getDataDriven1(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven1, coords);\\n}\\nhighp vec4 getGPGPU(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(gpgpu, coords);\\n}\\nhighp vec4 getDataDriven2(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven2, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\nbool isMagic = v.x == 255.0 && v.y == 255.0;\\nif (isMagic) {\\nreturn NAN_MAGIC_NUMBER;\\n}\\nreturn (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"barycentric.glsl\":\"float inTriangle(vec3 bary) {\\nvec3 absBary = abs(bary);\\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\\n}\\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\\nmat3 xyToBarycentricMat3 = mat3(\\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\\n);\\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.00001;\\nconst float EPSILON_HITTEST = 0.05;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\\nconst int BITSET_LINE_SCALE_DASH = 2;\",fill:{\"common.glsl\":\"#include <materials/symbologyTypeUtils.glsl>\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying highp vec3 v_id;\\nvarying lowp vec4 v_color;\\nvarying lowp float v_opacity;\\nvarying mediump vec4 v_aux1;\\n#ifdef PATTERN\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvarying lowp float v_isOutline;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\nlowp vec4 drawLine() {\\nfloat v_lineWidth = v_aux1.x;\\nvec2  v_normal    = v_aux1.yz;\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineWidth,\\nv_opacity,\\nv_id\\n);\\nreturn shadeLine(inputs);\\n}\\n#endif\\nlowp vec4 drawFill() {\\nlowp vec4 out_color = vec4(0.);\\n#ifdef HITTEST\\nout_color = v_color;\\n#elif defined(PATTERN)\\nmediump vec4 v_tlbr = v_aux1;\\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\nout_color = v_opacity * v_color * color;\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\nvec4 isPositive0 = step(0.0, difference0);\\nvec4 isPositive1 = step(0.0, difference1);\\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\nfloat lessThanEqZero = step(weightSum, 0.0);\\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\\nfloat divisor = (weightSum + lessThanEqZero);\\nvec4 weights0 = difference0 * isPositive0 / divisor;\\nvec4 weights1 = difference1 * isPositive1 / divisor;\\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\nfloat diffMax = max(max4(difference0), max4(difference1));\\nfloat lessThanZero = step(diffMax, 0.0);\\nfloat greaterOrEqZero = 1.0 - lessThanZero;\\nvec4 isMax0 = step(diffMax, difference0);\\nvec4 isMax1 = step(diffMax, difference1);\\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\nout_color = preEffectColor;\\n#else\\nout_color = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\nout_color.a = 1.0;\\n#endif\\nreturn out_color;\\n}\\nvoid main() {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (v_isOutline > 0.5) {\\ngl_FragColor = drawLine();\\n} else {\\ngl_FragColor = drawFill();\\n}\\n#else\\ngl_FragColor = drawFill();\\n#endif\\n}\",\"fill.vert\":\"#include <materials/symbologyTypeUtils.glsl>\\n#define PACKED_LINE\\nprecision highp float;\\nattribute float a_bitset;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_aux2;\\nattribute vec4 a_aux3;\\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\nattribute vec4 a_aux1;\\nattribute vec2 a_zoomRange;\\n#else\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#endif\\n#endif\\nuniform vec2 u_tileOffset;\\nuniform vec2 u_maxIntNumOfCrossing;\\n#include <util/encoding.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#include <materials/fill/hittest.glsl>\\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\\nLineData outputs = buildLine(\\nout_pos,\\na_id,\\na_pos,\\na_color,\\n(a_aux3.xy - 128.) / 16.,\\n(a_aux3.zw - 128.) / 16.,\\n0.,\\na_aux2.z / 16.,\\na_bitset,\\nvec4(0.),\\nvec2(0.),\\na_aux2.w / 16.\\n);\\nv_id      = outputs.id;\\nv_opacity = outputs.opacity;\\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\\nout_color = outputs.color;\\n}\\n#endif\\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\\nfloat a_bitSet = a_bitset;\\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\\n0., -2. / 512.,  0.,\\n-1.,  1.,  1.  );\\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\\n#else\\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n#endif\\n#ifdef PATTERN\\nvec4  a_tlbr   = a_aux1;\\nfloat a_width  = a_aux2.x;\\nfloat a_height = a_aux2.y;\\nvec2  a_offset = a_aux2.zw;\\nvec2  a_scale  = a_aux3.xy;\\nfloat a_angle  = a_aux3.z;\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\\na_width *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\\na_height *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\\nfloat width = u_zoomFactor * a_width * scale.x;\\nfloat height = u_zoomFactor * a_height * scale.y;\\nfloat angle = C_256_TO_RAD * a_angle;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nfloat dx = 0.0;\\nfloat dy = 0.0;\\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\\nfloat id = rgba2float(vec4(a_id, 0.0));\\ndx = rand(vec2(id, 0.0));\\ndy = rand(vec2(0.0, id));\\n}\\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n-sinA / width, cosA / height, 0,\\ndx,            dy,           1);\\nvec2 patternSize = vec2(a_width, a_height);\\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\\ntileOffset = mod(tileOffset, patternSize);\\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\\n#ifdef VV_COLOR\\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\\n#else\\nv_sampleAlphaOnly = 0.0;\\n#endif\\n}\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n}\\n#ifdef HITTEST\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\\nout_pos = vec3(0., 0., 2.);\\nreturn;\\n}\\n#endif\\nhittestFill(out_color, out_pos);\\ngl_PointSize = 1.0;\\n}\\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\\nif (v_isOutline > 0.5) {\\ndrawLine(out_color, out_pos);\\n} else {\\ndrawFill(out_color, out_pos);\\n}\\n}\\n#else\\n#define draw drawFill\\n#endif\\nvoid main()\\n{\\nINIT;\\nhighp vec3 pos  = vec3(0.);\\nhighp vec4 color  = vec4(0.);\\ndraw(color, pos);\\nv_color = color;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\",\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestFill(\\nout lowp vec4 out_color,\\nout highp vec3 out_pos\\n) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\\nfloat hittestDist = u_hittestDist;\\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist < 0. || dist >= hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\\n}\\n#endif\"},hittest:{\"common.glsl\":\"#ifdef HITTEST\\nuniform float hittestDist;\\nuniform highp vec2 hittestPos;\\nfloat projectScalar(vec2 a, vec2 b) {\\nreturn dot(a, normalize(b));\\n}\\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\\nvec2 L = p2 - p1;\\nvec2 A = p0 - p1;\\nfloat projAL = projectScalar(A, L);\\nfloat t = clamp(projAL / length(L), 0., 1.);\\nreturn distance(p0, p1 + t * (p2 - p1));\\n}\\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\\nfloat dist = distance(pos, vec3(hittestPos, 1.));\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif ((dist - size) > hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\\n}\\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\\nreturn inTriangle(xyToBarycentric(p, a, b, c));\\n}\\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\\nvec2 ba = b - a;\\nvec2 ca = c - a;\\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\\nif (isParallel) {\\nreturn -1.;\\n}\\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\\nreturn 0.;\\n}\\nfloat distAB = distPointSegment(p, a, b);\\nfloat distBC = distPointSegment(p, b, c);\\nfloat distCA = distPointSegment(p, c, a);\\nreturn min(min(distAB, distBC), distCA);\\n}\\n#endif\"},icon:{\"common.glsl\":\"#include <util/encoding.glsl>\\nuniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\\n#ifdef SDF\\nvec4 getColor(vec2 v_size, vec2 v_tex) {\\n#ifdef HITTEST\\nlowp vec4 fillPixelColor = vec4(1.0);\\n#else\\nlowp vec4 fillPixelColor = v_color;\\n#endif\\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\nfloat size = max(v_size.x, v_size.y);\\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\nfloat outlineWidth = v_outlineWidth;\\n#ifdef HIGHLIGHT\\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n#endif\\nif (outlineWidth > 0.25) {\\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\nfloat clampedOutlineSize = min(outlineWidth, size);\\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n}\\nreturn v_opacity * fillPixelColor;\\n}\\n#else\\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\\nlowp vec4 texColor = texture2D(u_texture, v_tex);\\nreturn v_opacity * texColor * v_color;\\n}\\n#endif\",heatmapAccumulate:{\"common.glsl\":\"varying lowp vec4 v_hittestResult;\\nvarying mediump vec2 v_offsetFromCenter;\\nvarying highp float v_fieldValue;\",\"heatmapAccumulate.frag\":\"precision mediump float;\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 0.25\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform lowp sampler2D u_texture;\\nvoid main() {\\n#ifdef HITTEST\\ngl_FragColor = v_hittestResult;\\n#else\\nfloat radius = length(v_offsetFromCenter);\\nfloat shapeWeight = step(radius, 1.0);\\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\\n#endif\\n}\",\"heatmapAccumulate.vert\":\"precision highp float;\\nattribute vec2 a_vertexOffset;\\nvec4 a_color = vec4(0.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\nuniform float u_radius;\\nuniform float u_isFieldActive;\\n#include <materials/vcommon.glsl>\\n#include <materials/hittest/common.glsl>\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\nvoid main() {\\nfloat filterFlags = getFilterFlags();\\n#ifdef HITTEST\\nhighp vec4 out_hittestResult = vec4(0.);\\nhighp vec3 out_pos = vec3(0.);\\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\\nv_hittestResult = out_hittestResult;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\nv_offsetFromCenter = sign(a_vertexOffset);\\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_vertexOffset1;\\nattribute vec2 a_vertexOffset2;\\nattribute vec2 a_texCoords1;\\nattribute vec2 a_texCoords2;\\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\\n}\\nvoid hittestIcon(\\ninout lowp vec4 out_color,\\nout highp vec3 out_pos,\\nin vec3 pos,\\nin vec3 offset,\\nin vec2 size,\\nin float scaleFactor,\\nin float isMapAligned\\n) {\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec2 tex0 = a_texCoords  / u_mosaicSize;\\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\\nfloat alphaSum = 0.;\\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\\nout_pos.z += step(alphaSum, .05) * 2.0;\\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\\n}\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/icon/common.glsl>\\nvoid main()\\n{\\n#ifdef HITTEST\\nvec4 color = v_color;\\n#else\\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\\n#endif\\n#ifdef HIGHLIGHT\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec2 a_bitSetAndDistRatio;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\n#include <materials/icon/hittest.glsl>\\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat f = getSize(size.y) / size.y;\\nfloat sizeFactor = size.y / referenceSize;\\nreturn getSize(referenceSize) / referenceSize;\\n#else\\nreturn 1.;\\n#endif\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_bitSet = a_bitSetAndDistRatio.x;\\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\\nsize.xy     *= scaleFactor;\\noffset.xy   *= scaleFactor;\\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\\nvec2 v_tex   = a_texCoords / u_mosaicSize;\\nfloat filterFlags = getFilterFlags();\\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity  = getOpacity();\\nv_id       = norm(a_id);\\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\\nv_sizeTex  = vec4(size.xy, v_tex.xy);\\n#ifdef SDF\\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\\n#ifdef VV_COLOR\\nv_overridingOutlineColor = v_isThin;\\n#else\\nv_overridingOutlineColor = 0.0;\\n#endif\\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\\nv_outlineColor = a_outlineColor;\\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\\n#endif\\n#ifdef HITTEST\\nhighp vec4 out_color = vec4(0.);\\nhighp vec3 out_pos   = vec3(0.);\\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\\nv_color = out_color;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\nfloat glyphAngle = angle * 360.0 / 254.0;\\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\nfloat z = 0.0;\\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\\nreturn z;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat groupMinZoom    = getMinZoom();\\nfloat glyphMinZoom    = a_glyphData.x;\\nfloat glyphMaxZoom    = a_glyphData.y;\\nfloat glyphAngle      = a_glyphData.z;\\nfloat a_isBackground  = a_glyphData.w;\\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\nfloat fontSize           = a_texAndSize.z;\\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor = (isBackground + isText) * a_color;\\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\\nv_opacity   = 1.0;\\nv_tex       = a_texCoords / u_mosaicSize;\\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\ngl_Position = vec4(v_pos, 1.0);\\n#ifdef DEBUG\\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\\n#ifdef SDF\\nvarying mediump float v_lineWidthRatio;\\n#endif\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\\n#ifdef HITTEST\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist >= u_hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\\n}\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\n#ifdef HITTEST\\nvoid main() {\\ngl_FragColor = v_color;\\n}\\n#else\\nvoid main() {\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineHalfWidth,\\nv_opacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr,\\nv_patternSize,\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance,\\n#endif\\n#endif\\nv_id\\n);\\ngl_FragColor = shadeLine(inputs);\\n}\\n#endif\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/line/hittest.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\n#ifdef HITTEST\\nvoid draw() {\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\\nfloat a_cimHalfWidth = a_aux.x / 16. ;\\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nhighp vec3 pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestLine(v_color, pos, halfWidth);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#else\\nvoid draw()\\n{\\nhighp vec3 pos = vec3(0.);\\nLineData outputs = buildLine(\\npos,\\na_id,\\na_pos,\\na_color,\\na_offsetAndNormal.xy / 16.,\\na_offsetAndNormal.zw / 16.,\\na_accumulatedDistanceAndHalfWidth.x,\\na_accumulatedDistanceAndHalfWidth.y / 16.,\\na_segmentDirection.w,\\na_tlbr,\\na_segmentDirection.xy / 16.,\\na_aux.x / 16.\\n);\\nv_id              = outputs.id;\\nv_color           = outputs.color;\\nv_normal          = outputs.normal;\\nv_lineHalfWidth   = outputs.lineHalfWidth;\\nv_opacity         = outputs.opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr          = outputs.tlbr;\\nv_patternSize   = outputs.patternSize;\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio = outputs.lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance = outputs.accumulatedDistance;\\n#endif\\n#endif\\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#endif\\nvoid main() {\\nINIT;\\ndraw();\\n}\"},pie:{\"pie.common.glsl\":\"uniform float outlineWidth;\\nuniform mediump float sectorThreshold;\\nvarying vec3  v_id;\\nvarying vec3  v_pos;\\nvarying vec2  v_offset;\\nvarying vec4  v_color;\\nvarying float v_size;\\nvarying float v_numOfEntries;\\nvarying float v_maxSectorAngle;\\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\\nvarying vec2  v_texCoords;\\nvarying float v_outlineWidth;\\nvarying float v_opacity;\\nstruct FilteredChartInfo {\\nfloat endSectorAngle;\\nint colorId;\\n};\",\"pie.frag\":\"precision highp float;\\n#include <util/atan2.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/pie/pie.common.glsl>\\nuniform lowp vec4 colors[numberOfFields];\\nuniform lowp vec4 defaultColor;\\nuniform lowp vec4 othersColor;\\nuniform lowp vec4 outlineColor;\\nuniform float donutRatio;\\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\\nreturn colors[colorIndex];\\n}\\nconst int OTHER_SECTOR_ID = 255;\\n#ifdef HITTEST\\nvec4 getColor() {\\nfloat distanceSize = length(v_offset) * v_size;\\nfloat donutSize = donutRatio * v_size;\\nfloat alpha = step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\\nreturn v_color;\\n}\\n#else\\nvec4 getColor() {\\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\\nif (angle < 0.0) {\\nangle += 360.0;\\n} else if (angle > 360.0) {\\nangle = mod(angle, 360.0);\\n}\\nint numOfEntries = int(v_numOfEntries);\\nfloat maxSectorAngle = v_maxSectorAngle;\\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || sectorThreshold > 0.0) ? othersColor : defaultColor;\\nlowp vec4 prevColor = vec4(0.0);\\nlowp vec4 nextColor = vec4(0.0);\\nfloat startSectorAngle = 0.0;\\nfloat endSectorAngle = 0.0;\\nif (angle < maxSectorAngle) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nstartSectorAngle = endSectorAngle;\\nendSectorAngle = v_filteredSectorToColorId[index].x;\\nif (endSectorAngle > angle) {\\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\\nprevColor = sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\\nbreak;\\n}\\nif (index == numOfEntries - 1) {\\nbreak;\\n}\\n}\\n} else {\\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\\nstartSectorAngle = maxSectorAngle;\\nendSectorAngle = 360.0;\\n}\\nlowp vec4 outlineColor = outlineColor;\\nfloat offset = length(v_offset);\\nfloat distanceSize = offset * v_size;\\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\\nfloat distanceToStartSector = (angle - startSectorAngle);\\nfloat distanceToEndSector = (endSectorAngle - angle);\\nfloat sectorThreshold = 0.6;\\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\\nif (endSectorAlpha > 0.0) {\\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\\n} else if (beginSectorAlpha > 0.0) {\\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\\n}\\n}\\nfloat donutSize = donutRatio * (v_size - v_outlineWidth);\\nfloat endOfDonut = donutSize - v_outlineWidth;\\nfloat aaThreshold = 0.75;\\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\\nfloat startOfOutline = v_size - v_outlineWidth;\\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\\n}\\nreturn v_opacity * circleAlpha * fillColor;\\n}\\n#endif\\nvoid main()\\n{\\nvec4 color = getColor();\\n#ifdef highlight\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"pie.vert\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/barycentric.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/pie/pie.common.glsl>\\n#include <materials/hittest/common.glsl>\\nattribute float a_bitSet;\\nattribute vec2  a_offset;\\nattribute vec2  a_texCoords;\\nattribute vec2  a_size;\\nattribute float a_referenceSize;\\nattribute vec2  a_zoomRange;\\nint filterValue(in float sectorAngle,\\nin int currentIndex,\\ninout FilteredChartInfo filteredInfo,\\ninout vec2 filteredSectorToColorId[numberOfFields]) {\\nif (sectorAngle > sectorThreshold * 360.0) {\\nfilteredInfo.endSectorAngle += sectorAngle;\\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\\n++filteredInfo.colorId;\\n}\\nreturn 0;\\n}\\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\\ninout FilteredChartInfo filteredInfo,\\nin float sectorAngles[numberOfFields]) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nfloat sectorValue = sectorAngles[index];\\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\\n}\\nreturn filteredInfo.colorId;\\n}\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\\nvec2 outSize = baseSize;\\n#ifdef VV_SIZE\\nfloat r = getSize(a_referenceSize, currentScale) / a_referenceSize;\\noutSize.xy *= r;\\noffset.xy *= r;\\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\nreturn outSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nvec3  offset       = vec3(in_offset, 0.0);\\nreturn getMatrix(isMapAligned) * offset;\\n}\\nfloat filterNaNValues(in float value) {\\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\\n}\\nvoid main()\\n{\\nINIT;\\nvec2  a_size   = a_size;\\nvec2  a_offset = a_offset / 16.0;\\nfloat outlineSize = outlineWidth;\\nfloat a_bitSet = a_bitSet;\\nfloat a_referenceSize = a_referenceSize;\\nvec2 a_texCoords = a_texCoords / 4.0;\\nvec2 markerSize = getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\\nfloat filterFlags = getFilterFlags();\\nvec3  pos         = vec3(a_pos / 10.0, 1.0);\\nv_opacity      = getOpacity();\\nv_id           = norm(a_id);\\nv_pos          = displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\\nv_offset       = sign(a_texCoords - 0.5);\\nv_size         = max(markerSize.x, markerSize.y);\\nv_outlineWidth = outlineSize;\\nfloat attributeData[10];\\nvec4 attributeData3 = getDataDriven0(a_id);\\nattributeData[0] = filterNaNValues(attributeData3.x);\\nattributeData[1] = filterNaNValues(attributeData3.y);\\nattributeData[2] = filterNaNValues(attributeData3.z);\\nattributeData[3] = filterNaNValues(attributeData3.w);\\n#if (numberOfFields > 4)\\nvec4 attributeData4 = getDataDriven1(a_id);\\nattributeData[4] = filterNaNValues(attributeData4.x);\\nattributeData[5] = filterNaNValues(attributeData4.y);\\nattributeData[6] = filterNaNValues(attributeData4.z);\\nattributeData[7] = filterNaNValues(attributeData4.w);\\n#endif\\n#if (numberOfFields > 8)\\nvec4 attributeData5 = getDataDriven2(a_id);\\nattributeData[8] = filterNaNValues(attributeData5.x);\\nattributeData[9] = filterNaNValues(attributeData5.y);\\n#endif\\nfloat sum = 0.0;\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsum += attributeData[i];\\n}\\nfloat sectorAngles[numberOfFields];\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\\n}\\nvec2 filteredSectorToColorId[numberOfFields];\\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\\nv_numOfEntries = float(numOfEntries);\\nv_maxSectorAngle = filteredInfo.endSectorAngle;\\nv_filteredSectorToColorId = filteredSectorToColorId;\\n#ifdef HITTEST\\nhighp vec3 out_pos = vec3(0.0);\\nv_color            = vec4(0.0);\\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\\ngl_PointSize = 1.0;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},shared:{line:{\"common.glsl\":\"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\nstruct LineData {\\nlowp vec4 color;\\nmediump vec2 normal;\\nmediump float lineHalfWidth;\\nlowp float opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nmediump vec4 tlbr;\\nmediump vec2 patternSize;\\n#endif\\n#ifdef SDF\\nmediump float lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nhighp float accumulatedDistance;\\n#endif\\n#endif\\nhighp vec3 id;\\n};\",\"line.frag\":\"uniform lowp float u_blur;\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\nuniform highp float u_pixelRatio;\\n#endif\\n#endif\\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\nfloat dist = d * line.lineHalfWidth;\\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\\n}\\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float lineHalfWidth = line.lineHalfWidth;\\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nlowp vec4 color = texture2D(u_texture, texCoord);\\n#ifdef VV_COLOR\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\n#endif\\nreturn line.opacity * line.color * color;\\n}\\n#else\\nlowp vec4 getLineColor(LineData line) {\\nreturn line.opacity * line.color;\\n}\\n#endif\\nvec4 shadeLine(LineData line)\\n{\\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\nlowp vec4 out_color = getLineColor(line) * alpha;\\n#ifdef HIGHLIGHT\\nout_color.a = step(1.0 / 255.0, out_color.a);\\n#endif\\n#ifdef ID\\nif (out_color.a < 1.0 / 255.0) {\\ndiscard;\\n}\\nout_color = vec4(line.id, 0.0);\\n#endif\\nreturn out_color;\\n}\",\"line.vert\":\"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\\n#ifdef VV_SIZE\\nfloat refLineWidth = 2.0 * referenceHalfWidth;\\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\\n#else\\nreturn lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\nhalfWidth = max(halfWidth, 2.0);\\n#endif\\nreturn halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nreturn thinLineFactor * halfWidth * offset;\\n}\\nLineData buildLine(\\nout vec3 out_pos,\\nin vec3 in_id,\\nin vec2 in_pos,\\nin vec4 in_color,\\nin vec2 in_offset,\\nin vec2 in_normal,\\nin float in_accumulatedDist,\\nin float in_lineHalfWidth,\\nin float in_bitSet,\\nin vec4 in_tlbr,\\nin vec2 in_segmentDirection,\\nin float in_referenceHalfWidth\\n)\\n{\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nfloat z         = 2.0 * step(baseWidth, 0.0);\\nvec2  dist      = getDist(in_offset, halfWidth);\\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvec4  color     = in_color;\\nfloat opacity   = 1.0;\\n#else\\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nfloat opacity   = getOpacity();\\n#ifdef SDF\\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\\n#endif\\n#endif\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\n#endif\\nout_pos = vec3(pos.xy, z);\\nreturn LineData(\\ncolor,\\nin_normal,\\nhalfWidth,\\nopacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nin_tlbr / u_mosaicSize.xyxy,\\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\\n#endif\\n#ifdef SDF\\nlineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\\n#endif\\n#endif\\nnorm(in_id)\\n);\\n}\"}},\"symbologyTypeUtils.glsl\":\"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\n#endif\",text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec3 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\n#ifdef HITTEST\\nvec4 getColor() {\\nreturn v_color;\\n}\\n#else\\nvec4 getColor()\\n{\\nfloat SDF_CUTOFF = (2.0 / 8.0);\\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\nlowp float dist = texture2D(u_texture, v_tex).a;\\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\nedge /= 2.0;\\n#endif\\nlowp float aa = v_antialiasingWidth;\\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\nreturn alpha * v_color * v_opacity;\\n}\\n#endif\\nvoid main()\\n{\\ngl_FragColor = getColor();\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\n#include <materials/text/hittest.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_zoomRange;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat r = getSize(referenceSize) / referenceSize;\\nbaseSize *= r;\\noffset.xy *= r;\\nreturn baseSize;\\n#endif\\nreturn baseSize;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_isBackground  = a_aux.y;\\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\\nfloat a_bitSet        = a_aux.w;\\nfloat a_fontSize      = a_texFontSize.z;\\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\nv_tex     = a_texCoords / u_mosaicSize;\\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n#ifdef HITTEST\\nhighp vec3 out_pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\\n+ u_tileMat3 * offset, fontSize / 2.);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#else\\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#endif\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\nreturn floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\nfloat offset = pow(2.0, float(bitIndex));\\nreturn mod(floor(bitset / offset), 2.0);\\n}\\nconst int maxHighlightReasons = 6;\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex + maxHighlightReasons);\\n}\\nfloat getHighlightBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex);\\n}\\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\\nfloat isAggregate = getBit(bitset.b, 7);\\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\nfloat r = mod(rshift(u32, 0), 255.0);\\nfloat g = mod(rshift(u32, 8), 255.0);\\nfloat b = mod(rshift(u32, 16), 255.0);\\nfloat a = mod(rshift(u32, 24), 255.0);\\nreturn vec4(r, g, b, a);\\n}\\nvec3 norm(in vec3 v) {\\nreturn v /= 255.0;\\n}\\nvec4 norm(in vec4 v) {\\nreturn v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\nreturn max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\nreturn (bytes - 127.0) / 127.0;\\n}\\nhighp float rand(in vec2 co) {\\nhighp float a = 12.9898;\\nhighp float b = 78.233;\\nhighp float c = 43758.5453;\\nhighp float dt = dot(co, vec2(a,b));\\nhighp float sn = mod(dt, 3.14);\\nreturn fract(sin(sn) * c);\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/barycentric.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec3 a_id;\\nuniform highp mat3 displayViewScreenMat3;\\nuniform highp mat3 displayViewMat3;\\nuniform highp mat3 displayMat3;\\nuniform highp mat3 tileMat3;\\nuniform highp mat3 viewMat3;\\nuniform highp float pixelRatio;\\nuniform mediump float zoomFactor;\\nuniform mediump float antialiasing;\\nuniform mediump float currentScale;\\nuniform mediump float currentZoom;\\nuniform mediump float metersPerSRUnit;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\ntarget.rgba = getVisualVariableData(a_id);\\n}\\n#ifdef VV\\n#define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n#define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\nfloat isColorLocked   = getBit(a_bitSet, index);\\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\nreturn a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\nreturn 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size, in float currentScale) {\\n#ifdef VV_SIZE\\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\\n#else\\nreturn in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\nreturn mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\nreturn ceil(getFilterData(a_id).x * 255.0);\\n#else\\nreturn getFilterData(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\nreturn getAnimation(a_id);\\n}\\nfloat getMinZoom() {\\nvec4 data0 = getFilterData(a_id) * 255.0;\\nreturn data0.g;\\n}\\nmat3 getMatrixNoDisplay(float isMapAligned) {\\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\\n}\\nmat3 getMatrix(float isMapAligned) {\\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\\n}\\nfloat checkHighlightBit(float filterFlags, int index) {\\nreturn getHighlightBit(filterFlags, index);\\n}\\nfloat checkHighlight(float filterFlags) {\\nfloat result = checkHighlightBit(filterFlags, 0);\\nfor (int i = 1; i < maxHighlightReasons; i++) {\\nresult = result + checkHighlightBit(filterFlags, i);\\n}\\nreturn step(0.1, result);\\n}\\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef inside\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(outside)\\npos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(highlight)\\n#if !defined(highlight_all)\\npos.z += 2.0 * (1.0 - checkHighlight(filterFlags));\\n#endif\\n#endif\\npos.z += 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\\nreturn pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n#define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n#define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float colorValues[8];\\nuniform vec4 colors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 minMaxValueAndSize;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float unitMeterRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float opacityValues[8];\\nuniform float opacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float rotationType;\\n#endif\\nbool isNan(float val) {\\nreturn (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nfloat interpolationRatio = (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\\n}\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nfloat getVVScaleStopsSize(float currentScale) {\\nfloat outSize;\\nif (currentScale <= values[0]) {\\noutSize = sizes[0];\\n} else {\\nif (currentScale >= values[7]) {\\noutSize = sizes[7];\\n} else {\\nint index;\\nindex = -1;\\nfor (int i = 0; i < 8; i++) {\\nif (values[i] > currentScale) {\\nindex = i;\\nbreak;\\n}\\n}\\nint prevIndex = index - 1;\\nfloat a = currentScale - values[prevIndex];\\nfloat b = values[index] - values[prevIndex];\\noutSize = mix(sizes[prevIndex], sizes[index], a / b);\\n}\\n}\\nreturn outSize;\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 8;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nif (sizeValue <= values[0]) {\\nreturn sizes[0];\\n}\\nif (sizeValue >= values[VV_SIZE_N - 1]) {\\nreturn sizes[VV_SIZE_N - 1];\\n}\\nfor (int i = 1; i < VV_SIZE_N; ++i) {\\nif (values[i] >= sizeValue) {\\nfloat f = (sizeValue - values[i-1]) / (values[i] - values[i-1]);\\nreturn mix(sizes[i-1], sizes[i], f);\\n}\\n}\\nreturn sizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\nif (isNan(opacityValue)) {\\nreturn 1.0;\\n}\\nif (opacityValue <= opacityValues[0]) {\\nreturn opacities[0];\\n}\\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\\nif (opacityValues[i] >= opacityValue) {\\nfloat f = (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\\nreturn mix(opacities[i-1], opacities[i], f);\\n}\\n}\\nreturn opacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat4(1, 0, 0, 0,\\n0, 1, 0, 0,\\n0, 0, 1, 0,\\n0, 0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat4(cosA, sinA, 0, 0,\\n-sinA,  cosA, 0, 0,\\n0,     0, 1, 0,\\n0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat3(1, 0, 0,\\n0, 1, 0,\\n0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * -rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat3(cosA, -sinA, 0,\\nsinA, cosA, 0,\\n0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\nif (isNan(colorValue) || isColorLocked == 1.0) {\\nreturn fallback;\\n}\\nif (colorValue <= colorValues[0]) {\\nreturn colors[0];\\n}\\nfor (int i = 1; i < VV_COLOR_N; ++i) {\\nif (colorValues[i] >= colorValue) {\\nfloat f = (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\\nreturn mix(colors[i-1], colors[i], f);\\n}\\n}\\nreturn colors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nreturn getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\nfloat outSize = getVVScaleStopsSize(currentScale);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\nfloat outSize = getVVStopsSize(vvSize, size);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\nreturn getVVUnitValue(vvSize, size);\\n#else\\nreturn size;\\n#endif\\n}\"},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\nfloat mirrorFactor = 1.2 - factor;\\nreturn mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\nvec4 color = u_bloomStrength * (\\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n);\\ngl_FragColor = clamp(color, 0.0, 1.0);\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = float(SIGMA);\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 texel = texture2D(u_texture, v_uv);\\nvec3 luma = vec3(0.299, 0.587, 0.114);\\nfloat v = dot(texel.xyz, luma);\\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\ngl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = u_sigma;\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\nfloat samples[10];\\nsamples[0] = -0.08;\\nsamples[1] = -0.05;\\nsamples[2] = -0.03;\\nsamples[3] = -0.02;\\nsamples[4] = -0.01;\\nsamples[5] =  0.01;\\nsamples[6] =  0.02;\\nsamples[7] =  0.03;\\nsamples[8] =  0.05;\\nsamples[9] =  0.08;\\nvec2 dir = 0.5 - v_uv;\\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\ndir = dir / dist;\\nvec4 color = texture2D(u_colorTexture,v_uv);\\nvec4 sum = color;\\nfor (int i = 0; i < 10; i++) {\\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n}\\nsum *= 1.0 / 11.0;\\nfloat t = dist * sampleStrength;\\nt = clamp(t, 0.0, 1.0);\\ngl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\nvec4 color = texture2D(u_texture, v_uv);\\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\nvec3 colorUnpremultiply = color.rgb / color.a;\\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\nvec2 onePixel = vec2(1.0) / u_srcResolution;\\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\\nvec4 minColor = vec4(1.0);\\nvec4 maxColor = vec4(0.0);\\nfor (int y = 0; y < CELL_SIZE; ++y) {\\nfor (int x = 0; x < CELL_SIZE; ++x) {\\nvec2 offset = uv + vec2(x, y) * onePixel;\\nminColor = min(minColor, texture2D(u_minTexture, offset));\\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n}\\n}\\ngl_FragData[0] = minColor;\\ngl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nuniform vec2 u_shadowOffset;\\nuniform highp mat3 u_displayViewMat3;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"}},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\nG[0] = g0,\\nG[1] = g1,\\nG[2] = g2,\\nG[3] = g3,\\nG[4] = g4,\\nG[5] = g5,\\nG[6] = g6,\\nG[7] = g7,\\nG[8] = g8;\\nmat3 I;\\nfloat cnv[9];\\nvec3 sample;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 9; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nvec4 color = texture2D(u_colorTexture, v_uv);\\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_colorTexture, v_uv);\\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\nfloat a = color.a;\\ngl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\ntargetLocation = projectPixelLocation(targetLocation);\\n#endif\\nreturn targetLocation;\\n}\\nbool isOutside(vec2 coords){\\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\nvec4 color = texture2D(u_image, pixelLocation);\\n#endif\\nreturn color;\\n}\",\"common.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos * u_scale + u_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\",\"contrastBrightness.glsl\":\"uniform float u_contrastOffset;\\nuniform float u_brightnessOffset;\\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\\nfloat maxI = 255.0;\\nfloat mid = 128.0;\\nfloat c = u_contrastOffset;\\nfloat b = u_brightnessOffset;\\nvec4 v;\\nif (c > 0.0 && c < 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\\n} else if (c <= 0.0 && c > -100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\\n} else if (c == 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\\nv = (sign(v) + 1.0) / 2.0;\\n} else if (c == -100.0) {\\nv = vec4(mid, mid, mid, currentPixel.a);\\n}\\nvec3 rgb = clamp(v.rgb / 255.0, 0.0, 1.0);\\nreturn vec4(rgb, currentPixel.a);\\n}\",\"getSurfaceValues.glsl\":\"#include <raster/common/mirror.glsl>\\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\\nvec2 onePixel = 1.0 / srcImageSize;\\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\\nvalues[0] = va.r;\\nvalues[1] = vb.r;\\nvalues[2] = vc.r;\\nvalues[3] = vd.r;\\nvalues[4] = ve.r;\\nvalues[5] = vf.r;\\nvalues[6] = vg.r;\\nvalues[7] = vh.r;\\nvalues[8] = vi.r;\\nvalues[9] = alpha;\\n}\",\"inverse.glsl\":\"float invertValue(float value) {\\nfloat s = sign(value);\\nreturn (s * s) / (value + abs(s) - 1.0);\\n}\",\"mirror.glsl\":\"vec2 mirror(vec2 pos) {\\nvec2 pos1 = abs(pos);\\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n#ifdef LOOKUP_PROJECTION\\nvec4 pv = texture2D(u_transformGrid, coords);\\nreturn vec2(pv.r, pv.g);\\n#endif\\nvec2 index_image = floor(coords * u_targetImageSize);\\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\nvec2 srcLocation;\\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\\nif (pos.s <= pos.t) {\\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n} else {\\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n}\\nreturn srcLocation;\\n}\"},flow:{\"getFadeOpacity.glsl\":\"uniform float u_decayRate;\\nuniform float u_fadeToZero;\\nfloat getFadeOpacity(float x) {\\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\\n}\",\"getFragmentColor.glsl\":\"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\\nif (dist > featheringStart) {\\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\\n}\\nreturn color;\\n}\",imagery:{\"imagery.frag\":\"precision highp float;\\nvarying vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform float u_Min;\\nuniform float u_Max;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nfloat getIntensity(float v) {\\nreturn u_Min + v * (u_Max - u_Min);\\n}\\nvoid main(void) {\\nvec4 sampled = texture2D(u_texture, v_texcoord);\\nfloat intensity = getIntensity(sampled.r);\\ngl_FragColor = getColor(intensity);\\ngl_FragColor.a *= getOpacity(sampled.r);\\ngl_FragColor.a *= sampled.a;\\ngl_FragColor.rgb *= gl_FragColor.a;\\n}\",\"imagery.vert\":\"attribute vec2 a_position;\\nattribute vec2 a_texcoord;\\nuniform mat3 u_dvsMat3;\\nvarying vec2 v_texcoord;\\nvoid main(void) {\\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},particles:{\"particles.frag\":\"precision highp float;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/getFragmentColor.glsl>\\nvoid main(void) {\\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\\n}\",\"particles.vert\":\"attribute vec4 a_xyts0;\\nattribute vec4 a_xyts1;\\nattribute vec4 a_typeIdDurationSeed;\\nattribute vec4 a_extrudeInfo;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/vv.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nvec2 position0 = a_xyts0.xy;\\nfloat t0 = a_xyts0.z;\\nfloat speed0 = a_xyts0.w;\\nvec2 position1 = a_xyts1.xy;\\nfloat t1 = a_xyts1.z;\\nfloat speed1 = a_xyts1.w;\\nfloat type = a_typeIdDurationSeed.x;\\nfloat id = a_typeIdDurationSeed.y;\\nfloat duration = a_typeIdDurationSeed.z;\\nfloat seed = a_typeIdDurationSeed.w;\\nvec2 e0 = a_extrudeInfo.xy;\\nvec2 e1 = a_extrudeInfo.zw;\\nfloat animationPeriod = duration + u_trailLength;\\nfloat scaledTime = u_time * u_flowSpeed;\\nfloat randomizedTime = scaledTime + seed * animationPeriod;\\nfloat t = mod(randomizedTime, animationPeriod);\\nfloat fUnclamped = (t - t0) / (t1 - t0);\\nfloat f = clamp(fUnclamped, 0.0, 1.0);\\nfloat clampedTime = mix(t0, t1, f);\\nfloat speed = mix(speed0, speed1, f);\\nvec2 extrude;\\nvec2 position;\\nfloat fadeOpacity;\\nfloat introOpacity;\\nif (type == 2.0) {\\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nvec2 ortho = mix(e0, e1, f);\\nvec2 parallel;\\nparallel = normalize(position1 - position0) * 0.5;\\nif (id == 1.0) {\\nextrude = ortho;\\nv_texcoord = vec2(0.5, 0.0);\\n} else if (id == 2.0) {\\nextrude = -ortho;\\nv_texcoord = vec2(0.5, 1.0);\\n} else if (id == 3.0) {\\nextrude = ortho + parallel;\\nv_texcoord = vec2(1.0, 0.0);\\n} else if (id == 4.0) {\\nextrude = -ortho + parallel;\\nv_texcoord = vec2(1.0, 1.0);\\n}\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else {\\nif (fUnclamped < 0.0) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nif (id == 1.0) {\\nextrude = e0;\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 2.0) {\\nextrude = -e0;\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 3.0) {\\nextrude = mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else if (id == 4.0) {\\nextrude = -mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n}\\n}\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_color.a *= fadeOpacity;\\nv_color.a *= mix(1.0, introOpacity, u_introFade);\\nv_color.rgb *= v_color.a;\\n}\"},streamlines:{\"streamlines.frag\":\"precision highp float;\\nvarying float v_side;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_size;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/getFragmentColor.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\\n}\",\"streamlines.vert\":\"attribute vec3 a_positionAndSide;\\nattribute vec3 a_timeInfo;\\nattribute vec2 a_extrude;\\nattribute float a_speed;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_side;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nvoid main(void) {\\nvec4 lineColor = getColor(a_speed);\\nfloat lineOpacity = getOpacity(a_speed);\\nfloat lineSize = getSize(a_speed);\\nvec2 position = a_positionAndSide.xy;\\nv_side = a_positionAndSide.z;\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_time = a_timeInfo.x;\\nv_totalTime = a_timeInfo.y;\\nv_timeSeed = a_timeInfo.z;\\nv_color = lineColor;\\nv_color.a *= lineOpacity;\\nv_color.rgb *= v_color.a;\\nv_size = lineSize;\\n}\"},\"vv.glsl\":\"#define MAX_STOPS 8\\n#ifdef VV_COLOR\\nuniform float u_color_stops[MAX_STOPS];\\nuniform vec4 u_color_values[MAX_STOPS];\\nuniform int u_color_count;\\n#else\\nuniform vec4 u_color;\\n#endif\\n#ifdef VV_OPACITY\\nuniform float u_opacity_stops[MAX_STOPS];\\nuniform float u_opacity_values[MAX_STOPS];\\nuniform int u_opacity_count;\\n#else\\nuniform float u_opacity;\\n#endif\\n#ifdef VV_SIZE\\nuniform float u_size_stops[MAX_STOPS];\\nuniform float u_size_values[MAX_STOPS];\\nuniform int u_size_count;\\n#else\\nuniform float u_size;\\n#endif\\nuniform float u_featheringOffset;\\nvec4 getColor(float x) {\\n#ifdef VV_COLOR\\nvec4 color = u_color_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_color_count) {\\nbreak;\\n}\\nfloat x1 = u_color_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_color_stops[i];\\nvec4 y2 = u_color_values[i];\\nif (x < x2) {\\nvec4 y1 = u_color_values[i - 1];\\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\ncolor = y2;\\n}\\n}\\n}\\n#else\\nvec4 color = u_color;\\n#endif\\nreturn color;\\n}\\nfloat getOpacity(float x) {\\n#ifdef VV_OPACITY\\nfloat opacity = u_opacity_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_opacity_count) {\\nbreak;\\n}\\nfloat x1 = u_opacity_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_opacity_stops[i];\\nfloat y2 = u_opacity_values[i];\\nif (x < x2) {\\nfloat y1 = u_opacity_values[i - 1];\\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nopacity = y2;\\n}\\n}\\n}\\n#else\\nfloat opacity = u_opacity;\\n#endif\\nreturn opacity;\\n}\\nfloat getSize(float x) {\\n#ifdef VV_SIZE\\nfloat size = u_size_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_size_count) {\\nbreak;\\n}\\nfloat x1 = u_size_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_size_stops[i];\\nfloat y2 = u_size_values[i];\\nif (x < x2) {\\nfloat y1 = u_size_values[i - 1];\\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nsize = y2;\\n}\\n}\\n}\\n#else\\nfloat size = u_size;\\n#endif\\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\\n}\"},hillshade:{\"hillshade.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform int u_hillshadeType;\\nuniform float u_sinZcosAs[6];\\nuniform float u_sinZsinAs[6];\\nuniform float u_cosZs[6];\\nuniform float u_weights[6];\\nuniform vec2 u_factor;\\nuniform float u_minValue;\\nuniform float u_maxValue;\\nuniform float u_scaling;\\n#include <raster/lut/colorize.glsl>\\n#include <raster/common/getSurfaceValues.glsl>\\nvec3 rgb2hsv(vec3 c) {\\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\nfloat d = q.x - min(q.w, q.y);\\nfloat e = 1.0e-10;\\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(vec3 c) {\\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\\nvec3 hsv = rgb2hsv(rgb.xyz);\\nhsv.z = hillshade;\\nreturn vec4(hsv2rgb(hsv) * u_scaling, 1.0) * rgb.a;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nif (currentPixel.a == 0.0) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nfloat pv[10];\\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\\nfloat hillshade = 0.0;\\nif (u_hillshadeType == 0){\\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\\nif (z < 0.0)  z = 0.0;\\nhillshade = z;\\n} else {\\nfor (int k = 0; k < 6; k++) {\\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\\nif (z < 0.0) z = 0.0;\\nhillshade = hillshade + z * u_weights[k];\\nif (k == 5) break;\\n}\\n}\\n#ifdef APPLY_COLORMAP\\nvec4 result = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\\n#else\\nhillshade *= u_scaling;\\nvec4 result = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\\n#endif\\n#ifdef ROUND_OUTPUT\\nresult = vec4(floor(result.xyz + 0.5), result.a);\\n#endif\\ngl_FragColor = result;\\n}\"},lut:{\"colorize.glsl\":\"uniform sampler2D u_colormap;\\nuniform float u_colormapOffset;\\nuniform float u_colormapMaxIndex;\\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\\nvec4 color = texture2D(u_colormap, clrPosition);\\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\\nreturn result;\\n}\\nvec4 colorizeNoClamp(vec4 currentPixel, float scaleFactor) {\\nfloat value = currentPixel.r * scaleFactor - u_colormapOffset;\\nvec4 result = colorize(currentPixel, scaleFactor);\\nreturn result * step(0.0, value) * step(value, u_colormapMaxIndex);\\n}\",\"lut.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nvec4 result = colorizeNoClamp(currentPixel, 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\\n}\"},magdir:{\"magdir.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nuniform lowp float u_opacity;\\nvoid main() {\\ngl_FragColor = v_color * u_opacity;\\n}\",\"magdir.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nuniform float u_rotation;\\nuniform vec4 u_colors[12];\\nvarying vec4 v_color;\\nvoid main()\\n{\\nfloat angle = a_offset.y + u_rotation;\\n#ifndef ROTATION_GEOGRAPHIC\\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\\n#endif\\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\\nv_color = u_colors[int(a_vv.x)];\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},reproject:{\"reproject.frag\":\"precision mediump float;\\nvarying vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n}\",\"reproject.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_position;\\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\\n}\"},rfx:{aspect:{\"aspect.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nconst float pi = 3.14159265359;\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\\nalpha *= sign(abs(dzx) + abs(dzy));\\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\\nfloat aspect = aspect_rad * 180.0 / pi;\\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\\n}\"},bandarithmetic:{\"bandarithmetic.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nuniform float u_adjustments[3];\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index;\\n#ifdef NDXI\\nindex = (nir - red) * invertValue(nir + red);\\n#elif defined(SR)\\nindex = nir * invertValue(red);\\n#elif defined(CI)\\nindex = nir * invertValue(red) - 1.0;\\n#elif defined(SAVI)\\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\\n#elif defined(TSAVI)\\nfloat s = u_adjustments[0];\\nfloat a = u_adjustments[1];\\nfloat x = u_adjustments[2];\\nfloat y = -a * s + x * (1.0 + s * s);\\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\\n#elif defined(MSAVI)\\nfloat nir2 = 2.0 * nir + 1.0;\\nindex = 0.5 * (nir2 - sqrt(nir2 * nir2 - 8.0 * (nir - red)));\\n#elif defined(GEMI)\\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\\n#elif defined(PVI)\\nfloat a = u_adjustments[0];\\nfloat b = u_adjustments[1];\\nfloat y = sqrt(1.0 + a * a);\\nindex = (nir - a * red - b) * invertValue(y);\\n#elif defined(VARI)\\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\\n#elif defined(MTVI)\\nfloat green = pv2.b;\\nfloat v = sqrt(pow((2.0 * nir + 1.0), 2.0) - (6.0 * nir - 5.0 * sqrt(red)) - 0.5);\\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * invertValue(v);\\n#elif defined(RTVICORE)\\nfloat green = pv2.b;\\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\\n#elif defined(EVI)\\nfloat blue = pv2.b;\\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\\nindex =  (2.5 * (nir - red)) * invertValue(denom);\\n#elif defined(WNDWI)\\nfloat g = pv2.r;\\nfloat n = pv2.g;\\nfloat s = pv2.b;\\nfloat a = u_adjustments[0];\\nfloat denom = g + a * n + (1.0 - a) * s;\\nindex = (g - a * n - (1.0 - a) * s) * invertValue(denom);\\n#elif defined(BAI)\\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\\n#else\\ngl_FragColor = pv;\\nreturn;\\n#endif\\n#ifdef ROUND_OUTPUT\\nindex = floor(index + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},colormap2rgb:{\"colormap2rgb.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = colorizeNoClamp(vec4(pv.r, pv.r, pv.r, 1.0), 1.0);\\ngl_FragColor = vec4(result.xyz * 255.0, 1.0) * result.a * pv.a;\\n}\"},compositeband:{\"compositeband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\nuniform sampler2D u_image2;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\nfloat alpha = pv0.a;\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\nalpha *= pv1.a;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\nalpha = alpha * pv1.a * pv2.a;\\n#endif\\ngl_FragColor = vec4(a, b, c, alpha);\\n}\"},computechange:{\"computechange.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef DIFFERENCE\\nresult = a - b;\\n#elif defined(RELATIVE)\\nresult = (a - b) * invertValue(max(abs(a), abs(b)));\\n#endif\\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\\nresult = isInvalid ? 0.0 : result;\\nalpha *= float(!isInvalid);\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},contrast:{\"contrast.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/common/contrastBrightness.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = adjustContrastBrightness(pv, false);\\ngl_FragColor = vec4(floor(result.rgb * 255.0 + 0.5), result.a);\\n}\"},convolution:{\"convolution.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\nuniform float u_kernel[25];\\n#include <raster/common/mirror.glsl>\\nvoid main() {\\nvec3 rgb = vec3(0.0, 0.0, 0.0);\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat alpha = 1.0;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\\nalpha *= pv.a;\\n}\\n}\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},curvature:{\"curvature.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform float u_zlFactor;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\\nfloat curvature = 0.0;\\n#ifdef STANDARD\\ncurvature = -u_zlFactor * (d + e);\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n#else\\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\\nfloat g = (-pv[3] + pv[5]) / 2.0;\\nfloat h = (pv[1] - pv[7]) / 2.0;\\nfloat g2 = g * g;\\nfloat h2 = h * h;\\n#ifdef PROFILE\\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\\n#else\\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\\n#endif\\n#endif\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n}\"},extractband:{\"extractband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\ngl_FragColor = vec4(pv2, pv.a);\\n}\"},focalstatistics:{\"focalstatistics.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\n#include <raster/common/mirror.glsl>\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat count = 0.0;\\n#ifdef STDDEV\\nvec3 sum = vec3(0.0, 0.0, 0.0);\\nvec3 sum2 = vec3(0.0, 0.0, 0.0);\\n#endif\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nvec3 rgb = currentPixel.rgb;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\ncount += pv.a;\\n#ifdef MIN\\nrgb = min(rgb, pv.rgb);\\n#elif defined(MAX)\\nrgb = max(rgb, pv.rgb);\\n#elif defined(MEAN)\\nrgb += pv.rgb;\\n#elif defined(STDDEV)\\nsum += pv.rgb;\\nsum2 += (pv.rgb * pv.rgb);\\n#endif\\n}\\n}\\n#ifdef MEAN\\nrgb *= invertValue(count);\\n#elif defined(STDDEV)\\nrgb = sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\\n#endif\\nfloat alpha = step(0.9999, count);\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\n#ifdef FILL\\nrgb = (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\\n#endif\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},grayscale:{\"grayscale.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec3 u_weights;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat value = dot(u_weights, pv.rgb);\\ngl_FragColor = vec4(value, value, value, pv.a);\\n}\"},local:{\"local.frag\":\"precision highp float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef TWO_IMAGES\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\n#elif defined(CONDITIONAL)\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\n#endif\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef PLUS\\nresult = a + b;\\n#elif defined(MINUS)\\nresult = a - b;\\n#elif defined(TIMES)\\nresult = a * b;\\n#elif defined(DIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOATDIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOORDIVIDE)\\nresult = floor(a * invertValue(b));\\nalpha *= float(abs(sign(b)));\\n#elif defined(SQUARE)\\nresult = a * a;\\n#elif defined(SQRT)\\nresult = sqrt(a);\\n#elif defined(POWER)\\nresult = pow(a, b);\\n#elif defined(LN)\\nresult = a <= 0.0 ? 0.0: log(a);\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_1_0)\\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_2)\\nresult = a <= 0.0 ? 0.0: log2(a);\\nalpha *= float(a > 0.0);\\n#elif defined(EXP)\\nresult = exp(a);\\n#elif defined(EXP_1_0)\\nresult = pow(10.0, a);\\n#elif defined(EXP_2)\\nresult = pow(2.0, a);\\n#elif defined(ROUNDDOWN)\\nresult = floor(a);\\n#elif defined(ROUNDUP)\\nresult = ceil(a);\\n#elif defined(INT)\\nresult = float(sign(a)) * floor(abs(a));\\n#elif defined(MOD)\\nresult = mod(a, b);\\n#elif defined(NEGATE)\\nresult = -a;\\n#elif defined(ABS)\\nresult = abs(a);\\n#elif defined(ACOS)\\nresult = abs(a) > 1.0 ? 0.0: acos(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ACOSH)\\nresult = acosh(a);\\n#elif defined(ASIN)\\nresult = abs(a) > 1.0 ? 0.0: asin(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ASINH)\\nresult = asinh(a);\\n#elif defined(ATAN)\\nresult = atan(a);\\n#elif defined(ATANH)\\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\\nalpha *= step(abs(a), 1.0);\\n#elif defined(ATAN_2)\\nresult = atan(a, b);\\n#elif defined(COS)\\nresult = cos(a);\\n#elif defined(COSH)\\nresult = cosh(a);\\n#elif defined(SIN)\\nresult = sin(a);\\n#elif defined(SINH)\\nresult = sinh(a);\\n#elif defined(TAN)\\nresult = tan(a);\\n#elif defined(TANH)\\nresult = tanh(a);\\n#elif defined(BITWISEAND)\\nresult = float(int(a) & int(b));\\n#elif defined(BITWISEOR)\\nresult = float(int(a) | int(b));\\n#elif defined(BITWISELEFTSHIFT)\\nresult = float(int(a) << int(b));\\n#elif defined(BITWISERIGHTSHIFT)\\nresult = float(int(a) >> int(b));\\n#elif defined(BITWISENOT)\\nresult = float(~(int(a)));\\n#elif defined(BITWISEXOR)\\nresult = float(int(a) ^ int(b));\\n#elif defined(BOOLEANAND)\\nresult = float((a != 0.0) && (b != 0.0));\\n#elif defined(BOOLEANNOT)\\nresult = float(a == 0.0);\\n#elif defined(BOOLEANOR)\\nresult = float((a != 0.0) || (b != 0.0));\\n#elif defined(BOOLEANXOR)\\nresult = float((a != 0.0) ^^ (b != 0.0));\\n#elif defined(GREATERTHAN)\\nresult = float(a > b);\\n#elif defined(GREATERTHANEQUAL)\\nresult = float(a >= b);\\n#elif defined(LESSTHAN)\\nresult = float(a < b);\\n#elif defined(LESSTHANEQUAL)\\nresult = float(a <= b);\\n#elif defined(EQUALTO)\\nresult = float(a == b);\\n#elif defined(NOTEQUAL)\\nresult = float(a != b);\\n#elif defined(ISNULL)\\nresult = float(alpha == 0.0);\\nalpha = 1.0;\\n#elif defined(SETNULL)\\nfloat maskValue = float(a == 0.0);\\nresult = maskValue * b;\\nalpha *= maskValue;\\n#elif defined(CONDITIONAL)\\nfloat weight = float(abs(sign(a)));\\nresult = weight * b + (1.0 - weight) * c;\\n#endif\\nfloat rangeFactor = step(u_domainRange.s, result) * step(result, u_domainRange.t);\\nresult *= rangeFactor;\\nalpha *= rangeFactor;\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},mask:{\"mask.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_INCLUDED_RANGES 6\\n#define LEN_NODATA_VALUES 6\\nuniform highp float u_includedRanges[6];\\nuniform highp float u_noDataValues[6];\\nfloat maskFactor(float bandValue, float fromValue, float to) {\\nfloat factor = 1.0;\\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\\nfactor *= float(u_noDataValues[i] != bandValue);\\n}\\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\\nreturn factor;\\n}\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\\n#ifdef MULTI_BAND\\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\\nfloat maskFactor = redFactor * greenFactor * blueFactor;\\ngl_FragColor = pv * maskFactor;\\n#else\\ngl_FragColor = pv * redFactor;\\n#endif\\n}\"},ndvi:{\"ndvi.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index = (nir - red) * invertValue(nir + red);\\n#ifdef SCALED\\nindex = floor((index + 1.0) * 100.0 + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},remap:{\"remap.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_REMAP_RANGES 18\\n#define LEN_NODATA_RANGES 12\\nuniform highp float u_rangeMaps[18];\\nuniform highp float u_noDataRanges[12];\\nuniform highp float u_unmatchMask;\\nuniform vec2 u_clampRange;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat factor = 1.0;\\nfloat bandValue = pv.r;\\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\\nfactor *= inside;\\n}\\nfloat mapValue = 0.0;\\nfloat includeMask = 0.0;\\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\\n}\\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\\n}\"},slope:{\"slope.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform float u_zFactor;\\nuniform vec2 u_srcImageSize;\\nuniform float u_pixelSizePower;\\nuniform float u_pixelSizeFactor;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\\n#ifdef PERCENT_RISE\\nfloat result = rise2run * 100.0;\\n#else\\nfloat result = atan(rise2run) * 57.2957795;\\n#endif\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying highp vec2 v_texcoord;\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\\nval = clamp(val, minCutOff, maxCutOff);\\nfloat stretchedVal;\\n#ifdef USE_GAMMA\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\\n#else\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n#endif\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\\n#ifdef MULTI_BAND\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\\n#else\\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\\n#endif\\n}\"},vs:{\"vs.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"}},scalar:{\"scalar.frag\":\"precision mediump float;\\nuniform lowp float u_opacity;\\nvarying vec2 v_pos;\\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\\nconst float outlineSize = 0.02;\\nconst float innerRadius = 0.25;\\nconst float outerRadius = 0.42;\\nconst float innerSquareLength = 0.15;\\nvoid main() {\\nmediump float dist = length(v_pos);\\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\\n#ifdef INNER_CIRCLE\\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\\n#else\\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\\n#endif\\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\\n}\",\"scalar.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nvarying vec2 v_pos;\\nvoid main()\\n{\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 size = u_symbolSize * sizePercentage;\\nvec2 pos = a_pos + a_offset * size;\\nv_pos = a_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform bool u_useGamma;\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\n#include <raster/lut/colorize.glsl>\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\\nif (val >= maxCutOff) {\\nreturn maxOutput;\\n} else if (val <= minCutOff) {\\nreturn minOutput;\\n}\\nfloat stretchedVal;\\nif (useGamma) {\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\nif (gamma > 1.0) {\\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\\n}\\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\\n} else {\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n}\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\n#ifdef NOOP\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\nreturn;\\n#endif\\nif (u_bandCount == 1) {\\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n#ifdef APPLY_COLORMAP\\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\\n#else\\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\\n#endif\\n} else {\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\\n}\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nuniform mat3 u_worldExtent;\\nvoid main() {\\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\\n}\"},test:{\"TestShader.common.glsl\":\"#ifndef RETURN_RED\\nvarying    vec4      v_color;\\n#endif\\nvarying    vec2      v_offset;\",\"TestShader.frag\":\"precision highp float;\\n#include <test/TestShader.common.glsl>\\nvoid main() {\\nif (v_offset.x > -.5 && v_offset.y > -.5 && v_offset.x < .5 && v_offset.y < .5) {\\ndiscard;\\n}\\n#ifdef RETURN_RED\\ngl_FragColor = vec4(1., 0., 0., 1.);\\n#else\\ngl_FragColor = v_color;\\n#endif\\n}\",\"TestShader.vert\":\"const float POS_PRECISION_FACTOR = 10.;\\nconst float OFFSET_PRECISION_FACTOR = 10.;\\nconst float SIZE_PRECISION_FACTOR = 10.;\\nattribute  vec2      a_pos_packed;\\nattribute  vec2      a_offset_packed;\\nattribute  float     a_size_packed;\\n#ifdef DATA_DRIVEN_COLOR\\nconst float u_dataDrivenColor_validValues[4] = float[4](0., 0., 1., 0.);\\nuniform    vec4      u_dataDrivenColor_colorFallback;\\nuniform    vec4      u_dataDrivenColor_color;\\n#endif\\nuniform    float     u_view_zoomLevel;\\n#include <test/TestShader.common.glsl>\\n#ifdef DATA_DRIVEN_COLOR\\nvec4 getColor(float value) {\\nint index = -1;\\nfor (int i = 0; i < 4; i++) {\\nif (u_dataDrivenColor_validValues[i] == value) {\\nindex = i;\\nbreak;\\n}\\n}\\nif (index == -1) {\\nreturn u_dataDrivenColor_colorFallback;\\n}\\nreturn u_dataDrivenColor_color;\\n}\\n#endif\\nvoid main() {\\nvec2  a_pos = a_pos_packed / POS_PRECISION_FACTOR;\\nvec2  a_offset = a_offset_packed / OFFSET_PRECISION_FACTOR;\\nfloat a_size = a_size_packed / SIZE_PRECISION_FACTOR;\\nvec4 color = vec4(1., 0., 0., 1.);\\n#ifdef DATA_DRIVEN_COLOR\\ncolor = getColor(1.);\\n#endif\\nvec2 offsetScaled = a_offset * a_size;\\nvec4 pos = vec4(a_pos.xy + offsetScaled, 0., 1.);\\ngl_Position = pos;\\n#ifndef RETURN_RED\\nv_color = color;\\n#endif\\nv_offset = a_offset;\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\nlowp vec4 color = texture2D(u_texture, v_tex);\\ncolor.rgb *= color.a;\\ngl_FragColor = color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\nv_tex = a_pos;\\n}\"},util:{\"atan2.glsl\":\"float atan2(in float y, in float x) {\\nfloat t0, t1, t2, t3, t4;\\nt3 = abs(x);\\nt1 = abs(y);\\nt0 = max(t3, t1);\\nt1 = min(t3, t1);\\nt3 = 1.0 / t0;\\nt3 = t1 * t3;\\nt4 = t3 * t3;\\nt0 =         - 0.013480470;\\nt0 = t0 * t4 + 0.057477314;\\nt0 = t0 * t4 - 0.121239071;\\nt0 = t0 * t4 + 0.195635925;\\nt0 = t0 * t4 - 0.332994597;\\nt0 = t0 * t4 + 0.999995630;\\nt3 = t0 * t3;\\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\\nt3 = y < 0.0 ? -t3 : t3;\\nreturn t3;\\n}\",\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, rgba2float_factors);\\n}\"}};export{e as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import r from\"../../../../core/Logger.js\";import{e as t}from\"../../../../chunks/earcut.js\";import{set as n}from\"../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as o}from\"../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{convertFromNestedArray as s,convertFromPolygon as i}from\"../../../../layers/graphics/featureConversionUtils.js\";import c from\"../../../../layers/graphics/OptimizedGeometry.js\";import{i1616to32 as a}from\"./number.js\";import{BufferObject as f}from\"../../../webgl/BufferObject.js\";import{PrimitiveType as m,Usage as h,DataType as u}from\"../../../webgl/enums.js\";const l=r=>{switch(r.BYTES_PER_ELEMENT){case 1:return u.UNSIGNED_BYTE;case 2:return u.UNSIGNED_SHORT;case 4:return u.UNSIGNED_INT;default:throw new e(\"Cannot get DataType of array\")}},y=(e,r,t,n)=>{let o=0;for(let s=1;s<t;s++){const t=e[2*(r+s-1)],n=e[2*(r+s-1)+1];o+=(e[2*(r+s)]-t)*(e[2*(r+s)+1]+n)}return n?o>0:o<0},g=({coords:e,lengths:r},n)=>{const o=[];for(let s=0,i=0;s<r.length;i+=r[s],s+=1){const c=i,a=[];for(;s<r.length-1&&y(e,i+r[s],r[s+1],n);s+=1,i+=r[s])a.push(i+r[s]-c);const f=e.slice(2*c,2*(i+r[s])),m=t(f,a,2);for(const e of m)o.push(e+c)}return o};class p{constructor(e,r,t,n=!1){this._cache={},this.vertices=e,this.indices=r,this.primitiveType=t,this.isMapSpace=n}static fromPath(e){const r=s(new c,e.path,!1,!1),t=r.coords,n=new Uint32Array(g(r,!0)),o=new Uint32Array(t.length/2);for(let s=0;s<o.length;s++)o[s]=a(Math.floor(t[2*s]),Math.floor(t[2*s+1]));return new p({geometry:o},n,m.TRIANGLES)}static fromGeometry(t,n){const o=n.geometry?.type;switch(o){case\"polygon\":return p.fromPolygon(t,n.geometry);case\"extent\":return p.fromMapExtent(t,n.geometry);default:return r.getLogger(\"esri.views.2d.engine.webgl.Mesh2D\").error(new e(\"mapview-bad-type\",`Unable to create a mesh from type ${o}`,n)),p.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}static fromPolygon(e,r){const t=i(new c,r,!1,!1),s=t.coords,f=new Uint32Array(g(t,!1)),h=new Uint32Array(s.length/2),u=o(),l=o();for(let o=0;o<h.length;o++)n(u,s[2*o],s[2*o+1]),e.toScreen(l,u),h[o]=a(Math.floor(l[0]),Math.floor(l[1]));return new p({geometry:h},f,m.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:r,ymin:t,ymax:n}){const o={geometry:new Uint32Array([a(e,t),a(r,t),a(e,n),a(e,n),a(r,t),a(r,n)])},s=new Uint32Array([0,1,2,3,4,5]);return new p(o,s,m.TRIANGLES)}static fromMapExtent(e,r){const[t,n]=e.toScreen([0,0],[r.xmin,r.ymin]),[o,s]=e.toScreen([0,0],[r.xmax,r.ymax]),i={geometry:new Uint32Array([a(t,n),a(o,n),a(t,s),a(t,s),a(o,n),a(o,s)])},c=new Uint32Array([0,1,2,3,4,5]);return new p(i,c,m.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers?.forEach((e=>e?.dispose())),this._cache.indexBuffer=this._cache.vertexBuffers=null}get elementType(){return l(this.indices)}getIndexBuffer(e,r=h.STATIC_DRAW){return this._cache.indexBuffer??=f.createIndex(e,r,this.indices),this._cache.indexBuffer}getVertexBuffers(e,r=h.STATIC_DRAW){return this._cache.vertexBuffers??=new Map(Object.keys(this.vertices).reduce(((t,n)=>(t.push([n,f.createVertex(e,r,this.vertices[n])]),t)),new Array)),this._cache.vertexBuffers}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{watch as r}from\"../../../../core/reactiveUtils.js\";import{create as s}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import a from\"./Mesh2D.js\";import{createScreenExtent as o}from\"../../support/clippingUtils.js\";import{VertexArrayObject as h}from\"../../../webgl/VertexArrayObject.js\";class c extends i{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=r((()=>t.version),(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new c(e,t)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,r,s){const[i,a]=t.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===i&&this._lastHeight===a||(this._lastWidth=i,this._lastHeight=a,this._destroyGL()),null==this._cache.vao){const i=this._createMesh(t,this._clip),a=i.getIndexBuffer(e),o=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new h(e,r,s,o,a)}return this._cache.vao}_createTransforms(){return{displayViewScreenMat3:s()}}_invalidate(){this._destroyGL(),this.requestRender()}_createMesh(r,s){switch(s.type){case\"rect\":return a.fromScreenExtent(o(s,r.size[0],r.size[1]));case\"path\":return a.fromPath(s);case\"geometry\":return a.fromGeometry(r,s);default:return t.getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\").error(new e(\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),a.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}}export{c as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{brushes as s}from\"../brushes.js\";import{Container as e}from\"../Container.js\";import r from\"./ClippingInfo.js\";import{WGLDrawPhase as i}from\"./enums.js\";class n extends e{set clips(s){super.clips=s,this._updateClippingInfo(s)}renderChildren(s){s.painter.setPipelineState(null),null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(s.painter));for(const r of this._renderPasses)try{r.render(s)}catch(e){}}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[s.clip],target:()=>this._clippingInfos,drawPhase:i.MAP|i.LABEL|i.LABEL_ALPHA|i.DEBUG|i.HIGHLIGHT})]}_updateClippingInfo(s){null!=this._clippingInfos&&(this._clippingInfos.forEach((s=>s.destroy())),this._clippingInfos=null),null!=s&&s.length&&(this._clippingInfos=s.items.map((s=>r.fromClipArea(this.stage,s)))),this.requestRender()}}export{n as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as t}from\"../DefaultVertexAttributeLayouts.js\";import{FeatureTile as r}from\"../FeatureTile.js\";import o from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{tileInfo as s}from\"../shaders/TileInfoPrograms.js\";import{BufferObject as n}from\"../../../../webgl/BufferObject.js\";import{BlendFactor as a,PrimitiveType as l,Usage as f,TextureWrapMode as m,TextureSamplingMode as u}from\"../../../../webgl/enums.js\";import{createProgram as c}from\"../../../../webgl/ProgramTemplate.js\";import{Texture as d}from\"../../../../webgl/Texture.js\";import{TextureDescriptor as h}from\"../../../../webgl/TextureDescriptor.js\";import{VertexArrayObject as g}from\"../../../../webgl/VertexArrayObject.js\";const _=512,x=512,b=16,p=8,T=(x-2*p)/5;class y extends o{constructor(){super(...arguments),this._color=e(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:o,requestRender:i,allowDelayedRender:s}=e;if(!t.isReady&&t instanceof r&&t.hasData)return;if(this._loadWGLResources(o),s&&null!=i&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void i();o.bindVAO(this._outlineVertexArrayObject),o.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f(\"u_coord_range\",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),o.drawArrays(l.LINE_STRIP,0,4);const n=this._getTexture(o,t);n?(o.bindVAO(this._tileInfoVertexArrayObject),o.useProgram(this._tileInfoProgram),o.bindTexture(n,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f(\"u_delta\",0,0),this._tileInfoProgram.setUniform2f(\"u_dimensions\",n.descriptor.width,n.descriptor.height),o.drawArrays(l.TRIANGLE_STRIP,0,4),o.bindVAO()):o.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const r=c(e,i),o=c(e,s),a=new Int8Array([0,0,1,0,1,1,0,1]),l=n.createVertex(e,f.STATIC_DRAW,a),m=new g(e,i.attributes,t,new Map([[\"geometry\",l]])),u=new Int8Array([0,0,1,0,0,1,1,1]),d=n.createVertex(e,f.STATIC_DRAW,u),h=new g(e,s.attributes,t,new Map([[\"geometry\",d]]));this._outlineProgram=r,this._tileInfoProgram=o,this._outlineVertexArrayObject=m,this._tileInfoVertexArrayObject=h}_getTexture(e,t){if(!this._ctx){const e=document.createElement(\"canvas\");e.width=_,e.height=x,this._ctx=e.getContext(\"2d\")}if(!t.tileDebugInfoTexture){const r=new h;r.wrapMode=m.CLAMP_TO_EDGE,r.samplingMode=u.LINEAR,r.isImmutable=!0,r.width=_,r.height=x,t.tileDebugInfoTexture=new d(e,r)}const r=this._ctx;r.clearRect(0,0,r.canvas.width,r.canvas.height),r.textAlign=\"left\",r.textBaseline=\"top\",r.font=b-2+\"px sans-serif\",r.lineWidth=2,r.fillStyle=\"white\",r.strokeStyle=\"black\";const{debugSlot:o}=t;let i=p+T*o;const s=`${o}) ${t.key.id} (${t.constructor.name})`;r.strokeText(s,p,i),r.fillText(s,p,i),i+=b;const{debugInfo:n}=t;if(n){const{length:e,minOrderedLength:t,minUnorderedLength:o,triangleCount:s}=n.display;if(e>0){const t=`Length: ${e}`;r.strokeText(t,p,i),r.fillText(t,p,i),i+=b}if(t){const e=`Min ordered length: ${t}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(o){const e=`Min unordered length: ${o}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(s>0){s>1e5&&(r.fillStyle=\"red\",r.strokeStyle=\"white\");const e=`Triangle count: ${s}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}const{bytesUsed:a,bytesReserved:l}=n.memory;if(r.fillStyle=\"white\",r.strokeStyle=\"black\",a>0||l>0){const e=`Memory usage: ${a} of ${l} bytes`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}}return t.tileDebugInfoTexture.setData(r.canvas),t.tileDebugInfoTexture}}export{y as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(a){if(this.next=null,!Array.isArray(a))return void(this.data=a);this.data=a[0];let e=this;for(let n=1;n<a.length;n++)e.next=new t([a[n]]),e=e.next}*values(){let t=this;for(;t;)yield t.data,t=t.next}forEach(t){let a=this;for(;a;)t(a.data),a=a.next}get last(){return this.next?this.next.last:this}}class a{constructor(a){this._head=null,null!=a&&(this._head=new t(a))}get head(){return this._head}maxAvailableSpace(){if(null==this._head)return 0;let t=0;return this._head.forEach((a=>{const e=a.end-a.start;t=Math.max(t,e)})),t}firstFit(t){if(null==this._head)return null;let a=null,e=this._head;for(;e;){const n=e.data.end-e.data.start;if(n===t)return a?a.next=e.next:this._head=e.next,e.data.start;if(n>t){const a=e.data.start;return e.data.start+=t,a}a=e,e=e.next}return null}free(a,e){const n=a+e;if(null==this._head){const e=new t({start:a,end:n});return void(this._head=e)}if(n<=this._head.data.start){if(n===this._head.data.start)return void(this._head.data.start-=e);const r=new t({start:a,end:n});return r.next=this._head,void(this._head=r)}let r=this._head,d=r.next;for(;d;){if(d.data.start>=n){if(r.data.end===a){if(r.data.end+=e,r.data.end===d.data.start){const t=d.data.end-d.data.start;return r.data.end+=t,void(r.next=d.next)}return}if(d.data.start===n)return void(d.data.start-=e);const s=new t({start:a,end:n});return s.next=r.next,void(r.next=s)}r=d,d=d.next}if(a===r.data.end)return void(r.data.end+=e);const s=new t({start:a,end:n});r.next=s}clear(){this._head=null}}export{a as FreeList,t as List};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as r}from\"./sources/resolver.js\";const e={shaders:{vertexShader:r(\"background/background.vert\"),fragmentShader:r(\"background/background.frag\")},attributes:new Map([[\"a_pos\",0]])};export{e as background};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as e}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import s from\"../../tiling/TileKey.js\";class r extends i{constructor(t,e,i,r,n,o,h=n,l=o){super(),this.tileDebugInfoTexture=null,this.debugInfo={display:{length:0,minOrderedLength:0,minUnorderedLength:0,triangleCount:0},memory:{bytesUsed:0,bytesReserved:0}},this._destroyed=!1,this.key=new s(t),this.resolution=e,this.x=i,this.y=r,this.width=n,this.height=o,this.rangeX=h,this.rangeY=l}destroy(){this.tileDebugInfoTexture&&(this.tileDebugInfoTexture.dispose(),this.tileDebugInfoTexture=null),this._destroyed=!0}get debugSlot(){let t=this;for(;t.parent!==this._stage;){if(!t.parent)return 0;t=t.parent}return this._stage.children.indexOf(t)}setTransform(i){const s=this.resolution/(i.resolution*i.pixelRatio),r=this.transforms.tileMat3,[n,o]=i.toScreenNoRotation([0,0],[this.x,this.y]),h=this.width/this.rangeX*s,l=this.height/this.rangeY*s;t(r,h,0,0,0,l,0,n,o,1),e(this.transforms.displayViewScreenMat3,i.displayViewMat3,r)}get destroyed(){return this._destroyed}}export{r as TiledDisplayObject};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as e}from\"./sources/resolver.js\";const r={shaders:{vertexShader:e(\"tileInfo/tileInfo.vert\"),fragmentShader:e(\"tileInfo/tileInfo.frag\")},attributes:new Map([[\"a_pos\",0]])};export{r as tileInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nfunction n(){return new Float32Array(3)}function t(n){const t=new Float32Array(3);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function r(n,t,r){const e=new Float32Array(3);return e[0]=n,e[1]=t,e[2]=r,e}function e(n,t){return new Float32Array(n,t,3)}function o(){return n()}function u(){return r(1,1,1)}function c(){return r(1,0,0)}function i(){return r(0,1,0)}function a(){return r(0,0,1)}const f=o(),l=u(),s=c(),_=i(),y=a(),w=Object.freeze(Object.defineProperty({__proto__:null,ONES:l,UNIT_X:s,UNIT_Y:_,UNIT_Z:y,ZEROS:f,clone:t,create:n,createView:e,fromValues:r,ones:u,unitX:c,unitY:i,unitZ:a,zeros:o},Symbol.toStringTag,{value:\"Module\"}));export{l as ONES,s as UNIT_X,_ as UNIT_Y,y as UNIT_Z,f as ZEROS,t as clone,n as create,e as createView,r as fromValues,u as ones,c as unitX,i as unitY,a as unitZ,w as v,o as zeros};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as s}from\"../../../../core/libs/gl-matrix-2/math/mat2d.js\";import{create as r}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{set as i,multiply as e,invert as o}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{create as a}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{i as m,q as n}from\"../../../../chunks/vec32.js\";import{create as l}from\"../../../../core/libs/gl-matrix-2/factories/vec3f32.js\";import{tileSize as c}from\"./definitions.js\";import{TiledDisplayObject as h}from\"./TiledDisplayObject.js\";const f=a(),p=l();class d extends h{constructor(t,s,r,i){super(t,s,r,i,c,c)}destroy(){super.destroy()}setTransform(o){const a=this.resolution/o.resolution,m=this.transforms.tileMat3,[n,l]=o.toScreenNoRotation([0,0],[this.x,this.y]),c=this.width/this.rangeX*a,h=this.height/this.rangeY*a;i(m,c,0,0,0,h,0,n,l,1),e(this.transforms.displayViewScreenMat3,o.displayViewMat3,m);const f=t(r(),c,0,0,h,n,l);s(this.transforms.labelMat2d,o.viewMat2d,f)}_createTransforms(){return{labelMat2d:r(),tileMat3:a(),displayViewScreenMat3:a()}}containsScreenPoint(t,s,r){const i=e(f,t.viewMat3,this.transforms.tileMat3),a=o(f,i);if(null==a)return!0;m(p,...s,1);const l=n(p,p,a),c=r*(this.resolution/t.resolution);return l[0]>=-c&&l[0]<this.width+c&&l[1]>=-c&&l[1]<this.height+c}}export{d as AFeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{createProgramDescriptor as e}from\"../Utils.js\";import t from\"./WGLBrush.js\";import{background as s}from\"../shaders/BackgroundPrograms.js\";import{StencilOperation as o,CompareFunction as i,PrimitiveType as a,DataType as n}from\"../../../../webgl/enums.js\";import{createProgram as l}from\"../../../../webgl/ProgramTemplate.js\";const m=()=>e(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:n.SHORT}]});class p extends t{constructor(){super(...arguments),this._color=r(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:r}){r.setStencilTestEnabled(!0),r.setBlendingEnabled(!1),r.setFaceCullingEnabled(!1),r.setColorMask(!1,!1,!1,!1),r.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),r.setStencilWriteMask(255),r.setStencilFunction(i.ALWAYS,0,255)}draw(r,e){const{context:t,state:o,requestRender:i,allowDelayedRender:p}=r,c=m(),d=e.getVAO(t,o,c.attributes,c.bufferLayouts);null!=d.indexBuffer&&(this._program||(this._program=l(t,s)),!p||null==i||this._program.compiled?(t.useProgram(this._program),this._program.setUniform2fv(\"u_coord_range\",[1,1]),this._program.setUniform4fv(\"u_color\",this._color),this._program.setUniformMatrix3fv(\"u_dvsMat3\",o.displayMat3),t.bindVAO(d),t.drawElements(a.TRIANGLES,d.indexBuffer.size,n.UNSIGNED_INT,0),t.bindVAO()):i())}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport r from\"./webgl/brushes/BrushClip.js\";import s from\"./webgl/brushes/WGLBrushStencil.js\";import e from\"./webgl/brushes/WGLBrushTileDebugInfo.js\";import{WGLBrushVTLBackground as l}from\"./webgl/brushes/WGLBrushVTLBackground.js\";import{WGLBrushVTLCircle as o}from\"./webgl/brushes/WGLBrushVTLCircle.js\";import{WGLBrushVTLFill as b}from\"./webgl/brushes/WGLBrushVTLFill.js\";import{WGLBrushVTLLine as i}from\"./webgl/brushes/WGLBrushVTLLine.js\";import{WGLBrushVTLSymbol as u}from\"./webgl/brushes/WGLBrushVTLSymbol.js\";const m={clip:r,stencil:s,tileDebugInfo:e,vtlBackground:l,vtlFill:b,vtlLine:i,vtlCircle:o,vtlSymbol:u};export{m as brushes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{DataType as e}from\"../../../webgl/enums.js\";import{VertexElementDescriptor as o}from\"../../../webgl/VertexElementDescriptor.js\";const r=new Map([[\"geometry\",[new o(\"a_pos\",2,e.BYTE,0,2)]]]),t=new Map([[\"geometry\",[new o(\"a_pos\",2,e.BYTE,0,4),new o(\"a_tex\",2,e.BYTE,2,4)]]]),n=new Map([[\"geometry\",[new o(\"a_pos\",2,e.UNSIGNED_SHORT,0,4)]]]);export{r as Pos2b,n as Pos2us,t as PosTex2b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as r}from\"../DefaultVertexAttributeLayouts.js\";import t from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{BufferObject as s}from\"../../../../webgl/BufferObject.js\";import{StencilOperation as o,Face as a,CompareFunction as l,PrimitiveType as n,Usage as d}from\"../../../../webgl/enums.js\";import{createProgram as m}from\"../../../../webgl/ProgramTemplate.js\";import{VertexArrayObject as c}from\"../../../../webgl/VertexArrayObject.js\";class _ extends t{constructor(){super(...arguments),this._color=e(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e}){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),e.setStencilWriteMask(255)}draw(e,r){const{context:t,requestRender:i,allowDelayedRender:s}=e;this._initialized||this._initialize(t),!s||null==i||this._solidProgram.compiled?(t.setStencilFunctionSeparate(a.FRONT_AND_BACK,l.GREATER,r.stencilRef,255),t.bindVAO(this._solidVertexArrayObject),t.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.displayViewScreenMat3),this._solidProgram.setUniform2fv(\"u_coord_range\",[r.rangeX,r.rangeY]),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),t.drawArrays(n.TRIANGLE_STRIP,0,4),t.bindVAO()):i()}_initialize(e){if(this._initialized)return!0;const t=m(e,i);if(!t)return!1;const o=new Int8Array([0,0,1,0,0,1,1,1]),a=s.createVertex(e,d.STATIC_DRAW,o),l=new c(e,i.attributes,r,new Map([[\"geometry\",a]]));return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}export{_ as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{FeatureBatchingStrategy as t,FeatureSymbologyDrawOrder as e}from\"./enums.js\";import{List as n}from\"./cpuMapped/FreeList.js\";import{isHittest as i}from\"./shaderGraph/techniques/featureTechniqueUtils.js\";import{PrimitiveType as a,DataType as s}from\"../../../webgl/enums.js\";function r(t,e){return t<<16|255&e}function d(t){return 255&t}class h{constructor(t,e,n,i,a){this.instance=t,this.materialKey=e,this.target=n,this.start=i,this.count=a}get textureKey(){return d(this.materialKey)}get indexEnd(){return this.start+this.count}extend(t){this.count+=t}render(t){this.instance.techniqueRef.render(t,this)}getStencilReference(){return this.target.stencilRef}getAttributePrecisionPackFactors(){const t=this.instance.instanceId;return this.target.getMesh(t).getAttributePrecisionPackFactors()}draw(t,e){i(t)?this.drawCompute(t.context,e):this.drawGeometry(t.context,e)}drawCompute(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getComputeVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT/3;t.bindVAO(i),t.drawElements(a.POINTS,this.count/3,s.UNSIGNED_INT,r),t.bindVAO(null)}drawGeometry(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getGeometryVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT;t.bindVAO(i),t.drawElements(a.TRIANGLES,this.count,s.UNSIGNED_INT,r),t.bindVAO(null)}}class l{constructor(){this._length=0,this._minOrderedLength=0,this._materialKeys=new Set}static fromDisplayEntities(t,e,n,i){const a=new l;for(const s of t.values())for(const t of s.records){const s=n.getInstance(t.instanceId),d=r(s.instanceId,t.textureKey);a.addRecord(s,d,t.indexStart,t.indexCount,t.vertexStart,t.vertexCount,e,i)}return a}get length(){return this._length}get minOrderedLength(){return this._minOrderedLength}get minUnorderedLength(){return this._materialKeys.size}render(t,e){const{drawPhase:n}=t;for(const i of this.infos()){const a=i.instance.techniqueRef;a.drawPhase&n&&(null==e||a.type===e)&&i.render(t)}}addRecord(i,a,s,r,d,l,o,c){let u=s,_=r;if(_||(u=d,_=l),!_)return;if(null==this._head){const t=new h(i,a,o,u,_);return this._head=new n(t),this._tail=this._head,this._length++,void this._minOrderedLength++}if(c===t.STRICT_ORDER)return this._insert(i,a,o,u,_,this._tail,null);let g=null,m=this._head;const f=i.instanceId,E=i.techniqueRef.symbologyPlane;if(c===t.STRICT_MARKERS_AND_TEXT&&(E===e.MARKER||E===e.TEXT))return this._insert(i,a,o,u,_,this._tail,null);for(;m;){const t=m.data.instance,e=t.instanceId,n=t.techniqueRef.symbologyPlane,s=g?.data.instance.instanceId;if(E<n||f===s&&f!==e)return this._insert(i,a,o,u,_,g,m);g=m,m=m.next}this._insert(i,a,o,u,_,g,null)}*infos(){if(null!=this._head)for(const t of this._head.values())yield t}_insert(t,e,i,a,s,r,d){if(null==r&&null==d){const r=new h(t,e,i,a,s);return this._head=new n(r),this._tail=this._head,this._length++,void this._minOrderedLength++}return e!==this._tail.data.materialKey&&this._minOrderedLength++,this._materialKeys.add(e),null==r&&null!=d?this._insertAtHead(t,e,i,a,s,d):null!=r&&null==d?this._insertAtEnd(t,e,i,a,s,r):null!=r&&null!=d?this._insertAtMiddle(t,e,i,a,s,r,d):void 0}_insertAtHead(t,e,i,a,s,r){const d=a+s;if(e===r.data.materialKey&&i===r.data.target&&d===r.data.start)r.data.start=a,r.data.count+=s;else{const d=new h(t,e,i,a,s);this._head=new n(d),this._head.next=r,this._length++}}_insertAtEnd(t,e,i,a,s,r){if(r.data.materialKey===e&&r.data.indexEnd===a)r.data.count+=s;else{const d=new h(t,e,i,a,s);this._tail=new n(d),r.next=this._tail,this._length++}}_insertAtMiddle(t,e,i,a,s,r,d){const l=a+s;if(r.data.materialKey===e&&r.data.target===i&&r.data.indexEnd===a)r.data.count+=s,r.data.materialKey===d.data.materialKey&&r.data.target===d.data.target&&r.data.indexEnd===d.data.start&&(r.data.count+=d.data.count,r.next=d.next,this._length--);else if(e===d.data.materialKey&&i===d.data.target&&l===d.data.start)d.data.start=a,d.data.count+=s;else{const l=new h(t,e,i,a,s),o=new n(l);r.next=o,o.next=d,this._length++}}}export{l as DisplayList,h as DisplayListInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._indexOnly=t,this.vertex={count:0,operations:[]},this.index={count:0,operations:[]}}copyRecord(t){let e=0;this._indexOnly||(e=this.vertex.count-t.vertexStart,this.vertex.operations.push({srcFrom:t.vertexStart,dstFrom:this.vertex.count,count:t.vertexCount,mutate:0}),t.vertexStart=this.vertex.count,this.vertex.count+=t.vertexCount);let n=!1;if(this._indexOnly&&this.index.operations.length>=1){const e=this.index.operations[this.index.operations.length-1];e.srcFrom+e.count===t.indexStart&&(e.count+=t.indexCount,n=!0)}n||this.index.operations.push({srcFrom:t.indexStart,dstFrom:this.index.count,count:t.indexCount,mutate:e}),t.indexStart=this.index.count,this.index.count+=t.indexCount}}export{t as ReshufflePlan};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../../core/has.js\";import{assertIsSome as t}from\"../../../../../core/maybe.js\";import{PooledUint32Array as i}from\"../PooledUint32Array.js\";import{FreeList as e}from\"./FreeList.js\";import{BufferObject as r}from\"../../../../webgl/BufferObject.js\";import{Usage as s}from\"../../../../webgl/enums.js\";const n=1.25,h=32767,a=h<<16|h;class d{constructor(t,e,r,s){this._pool=s;const n=i.create(e*r*Uint32Array.BYTES_PER_ELEMENT,this._pool);this.size=e,this.strideInt=r,this.bufferType=t,this.dirty={start:1/0,end:0},this.memoryStats={bytesUsed:0,bytesReserved:e*r*Uint32Array.BYTES_PER_ELEMENT},this._gpu=null,this._cpu=n,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}get intSize(){return this.fillPointer*this.strideInt}get byteSize(){return this.intSize*Uint32Array.BYTES_PER_ELEMENT}get invalidated(){return this.bufferSize>0&&!this._gpu}get invalidatedComputeBuffer(){return this.bufferSize>0&&!this._gpuComputeTriangles}invalidate(){this._invalidateTriangleBuffer(),this._gpu?.dispose(),this._gpu=null}_invalidateTriangleBuffer(){this._gpuComputeTriangles?.dispose(),this._gpuComputeTriangles=null}destroy(){this._gpu?.dispose(),this._gpuComputeTriangles?.dispose(),this._cpu?.destroy()}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new e({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;if(t*this.strideInt>this._cpu.length-this.fillPointer){this.invalidate();const i=this._cpu.length/this.strideInt,e=Math.round((i+t)*n),r=e*this.strideInt;this._cpu.expand(r*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(i,e-i),this.memoryStats.bytesReserved+=(e-i)*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}}set(t,i){this._cpu.array[t]!==i&&(this._cpu.array[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t+1,this.dirty.end))}getGPUBuffer(t,i=!1){if(!this.bufferSize)return null;if(i){if(\"index\"!==this.bufferType)throw new Error(\"Tired to get triangle buffer, but target is not an index buffer\");return null==this._gpuComputeTriangles&&(this._gpuComputeTriangles=this._createComputeBuffer(t)),this._gpuComputeTriangles}return null==this._gpu&&(this._gpu=this._createBuffer(t)),this._gpu}getView(t,i){return this._cpu.getUint32View(t,i/Uint32Array.BYTES_PER_ELEMENT)}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(i,e,r,s){const n=r*this.strideInt;if(!n)return 0;const h=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(i,h,n),d=this.freeList.firstFit(r);t(d,\"First fit region must be defined\");const u=d*this.strideInt,o=n;if(this._cpu.array.set(a,u),0!==s)for(let t=0;t<a.length;t++)this._cpu.array[t+u]+=s;return this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+o),this.fillPointer=Math.max(this.fillPointer,u+o),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d}copyFrom(i,e,r,s,n){const h=r*this.strideInt;if(!h)return 0;const a=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=i._cpu.getUint32View(a,h),u=this.freeList.firstFit(r);t(u,\"First fit region must be defined\");const o=u*this.strideInt,f=h;if(this._cpu.array.set(d,o),0!==s)for(let t=0;t<h;t++)this._cpu.array[o+t*this.strideInt+n]+=s;return this.dirty.start=Math.min(this.dirty.start,o),this.dirty.end=Math.max(this.dirty.end,o+f),this.fillPointer=Math.max(this.fillPointer,o+f),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,u}free(t,i,e){const r=t*this.strideInt,s=(t+i)*this.strideInt;if(!0===e)for(let n=t;n!==t+i;n++)this._cpu.array[n*this.strideInt]=a;this.dirty.start=Math.min(this.dirty.start,r),this.dirty.end=Math.max(this.dirty.end,s),this.freeList.free(t,i),this.memoryStats.bytesUsed-=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}upload(){if(this.dirty.end){if(this._invalidateTriangleBuffer(),null==this._gpu)return this.dirty.start=1/0,void(this.dirty.end=0);this._gpu.setSubData(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}reshuffle(t,e){if(0===e.length)return;const r=this.byteSize,s=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,n=r>s,h=this._cpu,a=i.create(s,this._pool);n||a.array.set(this._cpu.getUint32View(0,this.intSize));for(const i of e)if(n||i.srcFrom!==i.dstFrom||0!==i.mutate){this.dirty.start=Math.min(this.dirty.start,i.dstFrom*this.strideInt),this.dirty.end=Math.max(this.dirty.end,(i.dstFrom+i.count)*this.strideInt);for(let t=0;t<i.count;t++){const e=(i.dstFrom+t)*this.strideInt,r=(i.srcFrom+t)*this.strideInt;for(let t=0;t<this.strideInt;t++)a.array[e+t]=h.array[r+t]+i.mutate}}this._cpu.destroy(),this._cpu=a,n&&this.invalidate(),this.freeList.clear(),this.memoryStats.bytesUsed=this.memoryStats.bytesReserved=s}_createBuffer(t){const i=s.DYNAMIC_DRAW;return\"index\"===this.bufferType?r.createIndex(t,i,this._cpu.array):r.createVertex(t,i,this._cpu.array)}_createComputeBuffer(t){const i=s.DYNAMIC_DRAW,e=new Uint32Array(this.fillPointer/3);for(let r=0;r<this.fillPointer;r+=3)e[r/3]=this._cpu.array[r];return r.createIndex(t,i,e)}}export{d as MappedBuffer};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{destroyMaybe as e}from\"../../../../../core/maybe.js\";import{i1616to32 as t}from\"../number.js\";import{MappedBuffer as r}from\"./Buffer.js\";import{unpackDataView as i}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import{PrimitiveType as s}from\"../../../../webgl/enums.js\";import{VertexArrayObject as o}from\"../../../../webgl/VertexArrayObject.js\";const f=1e3;function n(e,t){const r=e.attributes.filter((e=>t.locations.has(e.name))).map((t=>({name:t.name,type:t.type,count:t.count,divisor:0,normalized:t.normalized??!1,offset:t.offset,stride:e.stride})));return new Map([[\"geometry\",r]])}function u(e,t){const r=[],i=e.attributes.filter((e=>t.locations.has(e.name)));for(const s of i){r.push({name:s.name,type:s.type,count:s.count,divisor:0,normalized:s.normalized??!1,offset:s.offset,stride:e.stride});const i=t.computeAttributeMap[s.name];null!=i&&2===i.length&&(r.push({name:i[0],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+e.stride,stride:e.stride}),r.push({name:i[1],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+2*e.stride,stride:e.stride}))}return new Map([[\"geometry\",r]])}class a{constructor(e,t){if(this._bufferPool=e,this._layout=t,this._invalidatedGeometry=!1,this._invalidatedCompute=!1,this._position=this._layout.attributes.find((e=>\"pos\"===e.name||\"position\"===e.name)),!this._position)throw new Error(\"InternalError: Unable to find position attribute\")}destroy(){this._indexBuffer=e(this._indexBuffer),this._vertexBuffer=e(this._vertexBuffer),this._computeVAO?.disposeVAOOnly(),this._geometryVAO?.disposeVAOOnly()}get layout(){return this._layout}getDrawArgs(e,t,r,i){return i?{primitive:s.POINTS,count:t/3,offset:r/3}:{primitive:e,count:t,offset:r}}getAttributePrecisionPackFactors(){const e={};for(const t of this.layout.attributes)t.packPrecisionFactor&&(e[t.name]=t.packPrecisionFactor);return e}getDebugVertexInfo(e=!1,t){if(!this._vertexBuffer)return null;const r=this._layout,s=r.stride,o=this._vertexBuffer.getView(0,this._vertexBuffer.byteSize),f=[];if(e)if(null==t)console.log(\"must provide location info to see compute attributes\");else for(const i of r.attributes){const e=t.computeAttributeMap[i.name];null!=e&&2===e.length&&(f.push({...i,name:e[0],offset:i.offset+s}),f.push({...i,name:e[1],offset:i.offset+2*s}))}const n=new DataView(o.slice().buffer);let u=o.byteLength/s;e&&(u=this._indexBuffer.fillPointer/3);const a=this._indexBuffer.getView(0,this._indexBuffer.byteSize);let h=0;const d=[];for(let m=0;m<u;m++){if(e){h=a[3*m]*s}const t={};for(const e of[...r.attributes,...f]){let r=`${e.offset} ${e.name}`,s=i(n,e,h);if(e.packPrecisionFactor)if(r+=` (precision: ${e.packPrecisionFactor})`,\"number\"==typeof s)s/=e.packPrecisionFactor;else for(let t=0;t<s.length;t++)s[t]/=e.packPrecisionFactor;t[r]=s}h+=s,d.push(t)}return{vertices:d,layout:r}}_ensure(e,t){if(this._vertexBuffer&&this._indexBuffer)this._indexBuffer.ensure(Math.max(e,1e3)),this._vertexBuffer.ensure(Math.max(t,1e3));else{const i=this._layout.stride/Uint32Array.BYTES_PER_ELEMENT;this._indexBuffer=new r(\"index\",Math.max(e,f),1,this._bufferPool),this._vertexBuffer=new r(\"vertex\",Math.max(t,f),i,this._bufferPool)}}append(e){const t=e.layout.stride,r=e.indices.byteLength/Uint32Array.BYTES_PER_ELEMENT,i=e.vertices.byteLength/t;this._ensure(r,i);const{vertices:s,indices:o}=e,f=this._vertexBuffer.insert(s,0,s.byteLength/t,0);return{vertexFrom:f,indexFrom:this._indexBuffer.insert(o,0,o.byteLength/4,f)}}copyRecordFrom(e,r,i,s){const{indexStart:o,indexCount:f,vertexStart:n,vertexCount:u}=r;this._ensure(f,u);const a=e._position,h=i*(a.packPrecisionFactor??1),d=s*(a.packPrecisionFactor??1),m=a.offset,c=t(h,d),l=this._vertexBuffer.copyFrom(e._vertexBuffer,n,u,c,m),_=this._indexBuffer.copyFrom(e._indexBuffer,o,f,l-n,0),p=r.clone();return p.vertexStart=l,p.indexStart=_,p.overlaps=0,p}remove(e,t,r,i){this._indexBuffer.free(e,t),this._vertexBuffer.free(r,i)}upload(){this._invalidatedGeometry=!0,this._invalidatedCompute=!0}getGeometryVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedGeometry){(this._vertexBuffer.invalidated||this._indexBuffer.invalidated)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._geometryVAO?.disposeVAOOnly(),this._geometryVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!1),i=this._vertexBuffer.getGPUBuffer(e);this._geometryVAO||(this._geometryVAO=new o(e,t.locations,n(this.layout,t),new Map([[\"geometry\",i]]),r)),this._invalidatedGeometry=!1}return this._geometryVAO}getComputeVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedCompute){(this._vertexBuffer.invalidated||this._indexBuffer.invalidatedComputeBuffer)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._computeVAO?.disposeVAOOnly(),this._computeVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!0),i=this._vertexBuffer.getGPUBuffer(e);this._computeVAO||(this._computeVAO=new o(e,t.locations,u(this.layout,t),new Map([[\"geometry\",i]]),r),this._invalidatedCompute=!1)}return this._computeVAO}get memoryStats(){return{bytesUsed:this._vertexBuffer.memoryStats.bytesUsed+this._indexBuffer.memoryStats.bytesUsed,bytesReserved:this._vertexBuffer.memoryStats.bytesReserved+this._indexBuffer.memoryStats.bytesReserved,vertex:this._vertexBuffer.memoryStats,index:this._indexBuffer.memoryStats}}reshuffle(e){this._vertexBuffer&&this._vertexBuffer.reshuffle(e.vertex.count,e.vertex.operations),this._indexBuffer&&this._indexBuffer.reshuffle(e.index.count,e.index.operations)}}export{a as MappedMesh};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._pos=0,this._buffer=t,this._i32View=new Int32Array(this._buffer),this._f32View=new Float32Array(this._buffer)}readInt32(){return this._i32View[this._pos++]}readF32(){return this._f32View[this._pos++]}}export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from\"../DisplayEntity.js\";import{unpackDataView as e}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import i from\"../util/Reader.js\";import{deserializeList as r}from\"../util/serializationUtils.js\";function o(e){if(!e)return null;return{entities:r(new i(e.entities),t),vertexData:e.data.map(a)}}function a(t){const i=t.layout.stride,r=new DataView(t.vertices),o=[],a=t.vertices.byteLength/i;let s=0;for(let n=0;n<a;n++){const a={};for(const i of t.layout.attributes){let t=`${i.offset} ${i.name}`,o=e(r,i,s);if(i.packPrecisionFactor)if(t+=` (precision: ${i.packPrecisionFactor})`,\"number\"==typeof o)o/=i.packPrecisionFactor;else for(let e=0;e<o.length;e++)o[e]/=i.packPrecisionFactor;a[t]=o}s+=i,o.push(a)}return{vertices:o,layout:t.layout}}export{o as debugMeshDataInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import e from\"../../../../core/Logger.js\";import{create as t}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{AFeatureTile as s}from\"./AFeatureTile.js\";import{RESHUFFLING_EXEMPT_MEMORY_BYTES as i,RESHUFFLING_TARGET_MEMORY_EFFICIENCY as r,RESHUFFLING_EXEMPT_DRAW_CALLS as o,RESHUFFLING_TARGET_DRAW_EFFICIENCY as d,tileSize as n}from\"./definitions.js\";import h from\"./DisplayEntity.js\";import{FeatureBatchingStrategy as a}from\"./enums.js\";import{DisplayList as l}from\"./FeatureDisplayList.js\";import{ReshufflePlan as f}from\"./ReshufflePlan.js\";import{LabelMetric as u}from\"./collisions/LabelMetric.js\";import{MappedMesh as p}from\"./cpuMapped/MappedMesh.js\";import{debugMeshDataInfo as _}from\"./mesh/meshDebugUtils.js\";import m from\"./util/Reader.js\";import{deserializeList as c}from\"./util/serializationUtils.js\";const y=()=>e.getLogger(\"esri.views.2d.engine.webgl.FeatureTile\");let g=0;class b extends s{constructor(e,s,i,r,o=!1){super(e,s,i,r),this._meshes=new Map,this._entities=[],this._invalidated=!1,this._nextUploadAllowed=!1,this.tileAge=g++,this._metrics=[],this._entityIds=new Set,this._entityIdsFromBuffer=new Set,this._attributeEpoch=0,this._encounteredEnd=!1,this._objectIdMap=null,this.visible=!0,this.transforms.labelMat2d=t(),this.enableDeferredUploads=o}destroy(){super.destroy(),this.clear()}clear(){for(const e of this._meshes.values())e.destroy();this._meshes.clear(),this._entities=[],this._metrics=[],this._displayList=null,this._invalidated=!0,this._entityIds.clear(),this._nextUploadAllowed=!0}beforeRender(e){super.beforeRender(e),this._needsReshuffle&&e.reshuffleManager.schedule(this)}tryReady(e){const t=this._invalidated&&!this._uploadAllowed;return!(this.isReady||t||!this._encounteredEnd||!(e>=this._attributeEpoch))&&(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${e}]`),this.ready(),this.requestRender(),!0)}get labelMetrics(){return this._metrics}get hasData(){return!!this._meshes.size}get hasAnimations(){return!!this._objectIdMap}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||this._nextUploadAllowed}upload(){this._nextUploadAllowed=!0}getDisplayList(e,t){if(this._uploadAllowed&&this._invalidated){this._entities.sort(((e,t)=>{const s=t.sortKey,i=e.sortKey;return i===s?e.id-t.id:i-s})),t===a.BATCHING&&this.reshuffle(!0),this._displayList=l.fromDisplayEntities(this._entities,this,e,t);for(const e of this._meshes.values())e.upload();this.debugInfo.display.length=this._displayList.length,this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength,this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength,this.requestRender(),this._invalidated=!1,this._nextUploadAllowed=!1}return this._displayList}getMesh(e){if(!this._meshes.has(e))throw new Error(`InternalError: Unable to find VAO for instance: ${e}`);return this._meshes.get(e)}getSortKeys(e){const t=new Map;for(const{id:s,sortKey:i}of this._entities)if(e.has(s)&&t.set(s,i),t.size===e.size)break;return t}onMessage(e){if(e.objectIdMap)for(const t in e.objectIdMap)this._objectIdMap||(this._objectIdMap={}),this._objectIdMap[t]=e.objectIdMap[t];switch(e.type){case\"append\":this._onAppendMessage(e);break;case\"update\":this._onUpdateMessage(e)}if(this._aggregateMemoryStats(),this.requestRender(),e.end){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${e.attributeEpoch}]`),!e.attributeEpoch)throw new Error(\"InternalError: Attribute epoch not defined.\");this._attributeEpoch=e.attributeEpoch,this._encounteredEnd=!0}}_onAppendMessage(e){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:_(e?.append)}),e.clear&&this.clear(),!e.append)return;const t=c(new m(e.append.entities),h);this._insert(t,e.append.data,!1)}_onUpdateMessage(e){has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:e.isPixelBuffer,modify:_(e.modify),remove:e.remove});const t=c(new m(e.modify.entities),h),s=t.map((e=>e.id)),i=e.isPixelBuffer??!1,r=[...e.remove,...s];i?this._removeByIdsFromBuffer(r):this._removeByIds(r),this._insert(t,e.modify.data,i)}reshuffle(e=!1){if(this.destroyed)return;const t=new Map;for(const s of this._entities)for(const i of s.records){const s=this._meshes.get(i.instanceId);let r=t.get(s);r||(r=new f(e),t.set(s,r)),r.copyRecord(i)}for(const[s,i]of t)s.reshuffle(i);this._invalidated=!0,this._aggregateMemoryStats(),has(\"esri-2d-update-debug\")&&y().info(`Tile ${this.key.id} was reshuffled.`)}copyPixelBufferedEntitesFrom(e,t,s,i){const r=s*n,o=i*n;for(const d of e._entities){let s=null;for(const i of d.records)if(i.overlaps&t){const t=e.getMesh(i.instanceId),n=this._ensureMesh(i.instanceId,t.layout).copyRecordFrom(t,i,r,o);s||(s=new h(d.id,d.sortKey),this._entityIdsFromBuffer.add(d.id),this._entities.push(s)),s.records.push(n)}}this._invalidated=!0}_ensureMesh(e,t){return this._meshes.has(e)||this._meshes.set(e,new p(this._stage.bufferPool,t)),this._meshes.get(e)}_insert(e,t,s){if(!e.length)return;this._removeDuplicatedBufferedEntites(e);const i=this._insertVertexData(t);for(const r of e){for(const e of r.records)e.updateBaseOffsets(i.get(e.instanceId));s?this._tryInsertBufferedEntity(r):this._insertEntity(r)}this._invalidated=!0}_insertVertexData(e){const t=new Map;for(const s of e){const{instanceId:e,layout:i}=s,r=this._ensureMesh(e,i).append(s);if(s.metrics){const e=c(new m(s.metrics),u)??[];this._metrics.push(...e)}t.set(e,r)}return t}_insertEntity(e){has(\"esri-2d-update-debug\")&&this._entityIds.has(e.id)&&console.error(`Tile ${this.key.id} insertEnitty: Already have entityId ${e.id}`),this._entityIds.add(e.id),this._entities.push(e)}_tryInsertBufferedEntity(e){this._entityIds.has(e.id)?this._removeRecordsFromMesh(e.records):(this._entityIdsFromBuffer.add(e.id),this._entities.push(e))}_removeDuplicatedBufferedEntites(e){if(!this._entityIdsFromBuffer.size)return;const t=[];for(const s of e)this._entityIdsFromBuffer.has(s.id)&&t.push(s.id);this._removeByIds(t)}_removeByIdsFromBuffer(e){this._removeByIds(e.filter((e=>this._entityIdsFromBuffer.has(e))))}_removeByIds(e){if(0===e.length)return;const t=new Set(e),s=[];for(const i of this._entities)t.has(i.id)?this._remove(i):s.push(i);this._entities=s,this._invalidated=!0}_remove(e){this._removeRecordsFromMesh(e.records),this._entityIds.delete(e.id),this._entityIdsFromBuffer.delete(e.id);for(let t=this._metrics.length-1;t>=0;t--)this._metrics[t].entityTexel===e.id&&this._metrics.splice(t,1)}_removeRecordsFromMesh(e){for(const t of e){const{instanceId:e,indexStart:s,indexCount:i,vertexStart:r,vertexCount:o}=t;this._meshes.get(e)?.remove(s,i,r,o)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0,this.debugInfo.memory.bytesReserved=0;for(const e of this._meshes.values())this.debugInfo.memory.bytesUsed+=e.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=e.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const{bytesUsed:e,bytesReserved:t}=this.debugInfo.memory,s=e/t,{minOrderedLength:n,length:h}=this.debugInfo.display;return t>i&&s<r||h>o&&n/h<d}get entityIds(){return this._objectIdMap?this._entities.map((({id:e})=>({objectId:this._objectIdMap[e],displayId:e}))):[]}}export{b as FeatureTile};\n"],"names":["r","has","s","create","t","e","acquireUint32Array","constructor","this","_array","_pool","array","length","getUint32View","Uint32Array","buffer","byteOffset","expand","byteLength","set","releaseUint32Array","destroy","a","_data","ArrayBuffer","BYTE_LENGTH","_freeList","start","end","firstFit","BYTES_PER_ELEMENT","free","i","_pages","_pagesByBuffer","Map","_bytesAllocated","_bytesTotal","console","log","_addPage","get","push","arguments","undefined","shaders","vertexShader","fragmentShader","attributes","n","Float32Array","o","u","c","f","l","_","y","w","N","Object","freeze","defineProperty","__proto__","ONES","UNIT_W","UNIT_X","UNIT_Y","UNIT_Z","ZEROS","clone","createView","fromValues","ones","unitW","unitX","unitY","unitZ","zeros","Symbol","toStringTag","value","background","bitBlit","debug","overlay","dot","filtering","heatmap","heatmapResolve","highlight","materials","fill","hittest","icon","heatmapAccumulate","label","line","pie","shared","text","blit","bloom","composite","gaussianBlur","luminosityHighPass","blur","dra","sobel","filterEffect","pp","raster","common","flow","imagery","particles","streamlines","hillshade","lut","magdir","reproject","rfx","aspect","bandarithmetic","colormap2rgb","compositeband","computechange","contrast","convolution","curvature","extractband","focalstatistics","grayscale","local","mask","ndvi","remap","slope","stretch","vs","scalar","stencil","test","tileInfo","util","split","forEach","resolveIncludes","g","_ref","coords","lengths","slice","m","p","_cache","vertices","indices","primitiveType","isMapSpace","fromPath","path","Math","floor","geometry","TRIANGLES","fromGeometry","type","fromPolygon","fromMapExtent","getLogger","error","fromScreenExtent","xmin","ymin","xmax","ymax","h","toScreen","_ref2","indexBuffer","dispose","vertexBuffers","elementType","UNSIGNED_BYTE","UNSIGNED_SHORT","UNSIGNED_INT","getIndexBuffer","STATIC_DRAW","createIndex","getVertexBuffers","keys","reduce","createVertex","Array","super","_clip","stage","_handle","version","_invalidate","ready","fromClipArea","_destroyGL","mesh","vao","remove","getVAO","size","_lastWidth","_lastHeight","_createMesh","_createTransforms","displayViewScreenMat3","requestRender","clips","_updateClippingInfo","renderChildren","painter","setPipelineState","_renderPasses","prepareRenderPasses","render","registerRenderPass","name","brushes","clip","target","_clippingInfos","drawPhase","MAP","LABEL","LABEL_ALPHA","DEBUG","HIGHLIGHT","items","map","b","_color","_outlineProgram","_tileInfoProgram","_outlineVertexArrayObject","_tileInfoVertexArrayObject","_ctx","prepareState","context","setBlendingEnabled","setBlendFunctionSeparate","ONE","ONE_MINUS_SRC_ALPHA","setColorMask","setStencilWriteMask","setStencilTestEnabled","draw","allowDelayedRender","isReady","hasData","_loadWGLResources","compiled","bindVAO","useProgram","setUniformMatrix3fv","transforms","setUniform2f","rangeX","rangeY","setUniform1f","setUniform4fv","drawArrays","LINE_STRIP","_getTexture","bindTexture","width","height","descriptor","TRIANGLE_STRIP","Int8Array","d","document","createElement","getContext","tileDebugInfoTexture","wrapMode","CLAMP_TO_EDGE","samplingMode","LINEAR","isImmutable","clearRect","canvas","textAlign","textBaseline","font","lineWidth","fillStyle","strokeStyle","debugSlot","key","id","strokeText","fillText","debugInfo","minOrderedLength","minUnorderedLength","triangleCount","display","bytesUsed","bytesReserved","memory","setData","next","isArray","data","values","last","_head","head","maxAvailableSpace","max","clear","_destroyed","resolution","x","parent","_stage","children","indexOf","setTransform","pixelRatio","tileMat3","toScreenNoRotation","displayViewMat3","destroyed","labelMat2d","viewMat2d","containsScreenPoint","viewMat3","_program","setFaceCullingEnabled","setStencilOp","KEEP","REPLACE","setStencilFunction","ALWAYS","state","location","count","SHORT","bufferLayouts","setUniform2fv","displayMat3","drawElements","tileDebugInfo","vtlBackground","vtlFill","vtlLine","vtlCircle","vtlSymbol","BYTE","_initialized","_solidProgram","_solidVertexArrayObject","setDepthWriteEnabled","setDepthTestEnabled","_initialize","setStencilFunctionSeparate","FRONT_AND_BACK","GREATER","stencilRef","instance","materialKey","textureKey","indexEnd","extend","techniqueRef","getStencilReference","getAttributePrecisionPackFactors","instanceId","getMesh","drawCompute","drawGeometry","getComputeVAO","POINTS","getGeometryVAO","_length","_minOrderedLength","_materialKeys","Set","fromDisplayEntities","records","getInstance","addRecord","indexStart","indexCount","vertexStart","vertexCount","infos","_tail","STRICT_ORDER","_insert","E","symbologyPlane","STRICT_MARKERS_AND_TEXT","MARKER","TEXT","add","_insertAtHead","_insertAtEnd","_insertAtMiddle","_indexOnly","vertex","operations","index","copyRecord","srcFrom","dstFrom","mutate","strideInt","bufferType","dirty","memoryStats","_gpu","_cpu","elementSize","intSize","fillPointer","byteSize","invalidated","bufferSize","invalidatedComputeBuffer","_gpuComputeTriangles","invalidate","_invalidateTriangleBuffer","freeList","ensure","round","min","getGPUBuffer","Error","_createComputeBuffer","_createBuffer","getView","insert","copyFrom","upload","setSubData","reshuffle","DYNAMIC_DRAW","_bufferPool","_layout","_invalidatedGeometry","_invalidatedCompute","_position","find","_indexBuffer","_vertexBuffer","_computeVAO","disposeVAOOnly","_geometryVAO","layout","getDrawArgs","primitive","offset","packPrecisionFactor","getDebugVertexInfo","stride","computeAttributeMap","DataView","_ensure","append","vertexFrom","indexFrom","copyRecordFrom","overlaps","locations","filter","divisor","normalized","_pos","_buffer","_i32View","Int32Array","_f32View","readInt32","readF32","entities","vertexData","_meshes","_entities","_invalidated","_nextUploadAllowed","tileAge","_metrics","_entityIds","_entityIdsFromBuffer","_attributeEpoch","_encounteredEnd","_objectIdMap","visible","enableDeferredUploads","_displayList","beforeRender","_needsReshuffle","reshuffleManager","schedule","tryReady","_uploadAllowed","labelMetrics","hasAnimations","needsUpload","getDisplayList","sort","sortKey","BATCHING","getSortKeys","onMessage","objectIdMap","_onAppendMessage","_onUpdateMessage","_aggregateMemoryStats","attributeEpoch","isPixelBuffer","modify","_removeByIdsFromBuffer","_removeByIds","info","copyPixelBufferedEntitesFrom","_ensureMesh","bufferPool","_removeDuplicatedBufferedEntites","_insertVertexData","updateBaseOffsets","_tryInsertBufferedEntity","_insertEntity","metrics","_removeRecordsFromMesh","_remove","delete","entityTexel","splice","entityIds","objectId","displayId"],"sourceRoot":""}