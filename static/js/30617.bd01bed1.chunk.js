"use strict";(self.webpackChunkn2_tree=self.webpackChunkn2_tree||[]).push([[30617],{30617:(a,e,t)=>{t.r(e),t.d(e,{default:()=>d});var r=t(50076),s=t(53430),i=t(4414),n=t(28383),l=t(42633),u=t(11563);const m=s.numericTypes;async function d(a){const{layerAdapter:e,...t}=await async function(a){if(!a?.layer||!a.view)throw new r.default("heatmap-statistics:missing-parameters","'layer' and 'view' parameters are required");const e=[u.mb.CSVLayer,u.mb.FeatureLayer,u.mb.GeoJSONLayer,u.mb.KnowledgeGraphSublayer,u.mb.OGCFeatureLayer,u.mb.OrientedImageryLayer,u.mb.ParquetLayer,u.mb.StreamLayer,u.mb.WFSLayer],{layer:t,...s}=a,d=(0,u.Jg)(t,e);if(!d)throw new r.default("heatmap-statistics:invalid-parameters","'layer' must be one of these types: "+(0,u.Ho)(e).join(", "));const c={layerAdapter:d,...s};c.radius=null==c.radius?null==c.blurRadius?18:(0,i.zp)(c.blurRadius):c.radius;const o=null!=c.signal?{signal:c.signal}:null;await d.load(o);const y=c.field,p=y?d.getField(y):null,b=await(0,l.EG)({field:y}),f=(0,n.MH)(d,b,"heatmap-statistics:invalid-parameters");if(f)throw f;if(p){const a=(0,n.a)(d,p,"heatmap-statistics:invalid-parameters",m);if(a)throw a}return c}(a);return e.heatmapStatistics(t)}}}]);
//# sourceMappingURL=30617.bd01bed1.chunk.js.map